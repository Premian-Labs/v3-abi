/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IUnderwriterVault {
  export type LockedSpreadInternalStruct = {
    totalLockedSpread: BigNumberish;
    spreadUnlockingRate: BigNumberish;
    lastSpreadUnlockUpdate: BigNumberish;
  };

  export type LockedSpreadInternalStructOutput = [
    totalLockedSpread: bigint,
    spreadUnlockingRate: bigint,
    lastSpreadUnlockUpdate: bigint
  ] & {
    totalLockedSpread: bigint;
    spreadUnlockingRate: bigint;
    lastSpreadUnlockUpdate: bigint;
  };
}

export declare namespace IPoolFactory {
  export type PoolKeyStruct = {
    base: AddressLike;
    quote: AddressLike;
    oracleAdapter: AddressLike;
    strike: BigNumberish;
    maturity: BigNumberish;
    isCallPool: boolean;
  };

  export type PoolKeyStructOutput = [
    base: string,
    quote: string,
    oracleAdapter: string,
    strike: bigint,
    maturity: bigint,
    isCallPool: boolean
  ] & {
    base: string;
    quote: string;
    oracleAdapter: string;
    strike: bigint;
    maturity: bigint;
    isCallPool: boolean;
  };
}

export declare namespace UnderwriterVaultMock {
  export type MaturityInfoStruct = {
    maturity: BigNumberish;
    strikes: BigNumberish[];
    sizes: BigNumberish[];
  };

  export type MaturityInfoStructOutput = [
    maturity: bigint,
    strikes: bigint[],
    sizes: bigint[]
  ] & { maturity: bigint; strikes: bigint[]; sizes: bigint[] };
}

export interface UnderwriterVaultMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "addListing"
      | "afterBuy"
      | "afterDeposit"
      | "allowance"
      | "approve"
      | "asset"
      | "assetDecimals"
      | "balanceOf"
      | "beforeWithdraw"
      | "chargeManagementFees"
      | "claimFees"
      | "clearListingsAndSizes"
      | "computeCLevel"
      | "computeManagementFees"
      | "contains"
      | "convertAssetFromUD60x18"
      | "convertAssetToUD60x18"
      | "convertToAssets"
      | "convertToShares"
      | "decimals"
      | "decreaseAllowance"
      | "decreasePositionSize"
      | "deposit"
      | "getAvailableAssets"
      | "getBlackScholesPrice"
      | "getClevelParams"
      | "getDelta"
      | "getLastManagementFeeTimestamp"
      | "getLastTradeTimestamp"
      | "getLockedSpreadInternal"
      | "getMaturityAfterTimestamp"
      | "getMaxMaturity"
      | "getMinMaturity"
      | "getNumberOfListings"
      | "getNumberOfListingsOnMaturity"
      | "getNumberOfUnexpiredListings"
      | "getPoolAddress"
      | "getPositionSize"
      | "getPricePerShare"
      | "getProtocolFees"
      | "getQuote"
      | "getSettlementPrice"
      | "getSpotPrice"
      | "getTotalFairValue"
      | "getTotalLiabilities"
      | "getTotalLiabilitiesExpired"
      | "getTotalLiabilitiesUnexpired"
      | "getTradeBounds"
      | "increaseAllowance"
      | "increasePositionSize"
      | "increaseSpreadUnlockingRate"
      | "increaseSpreadUnlockingTick"
      | "increaseTotalAssets"
      | "increaseTotalLockedAssets"
      | "increaseTotalLockedAssetsNoTransfer"
      | "increaseTotalLockedSpread"
      | "increaseTotalShares"
      | "insertMaturity"
      | "insertStrike"
      | "isCall"
      | "lastSpreadUnlockUpdate"
      | "maxDeposit"
      | "maxMaturity"
      | "maxMint"
      | "maxRedeem"
      | "maxWithdraw"
      | "minMaturity"
      | "mint"
      | "mintFromPool"
      | "mintMock"
      | "name"
      | "nonces"
      | "permit"
      | "positionSize"
      | "previewDeposit"
      | "previewMint"
      | "previewRedeem"
      | "previewWithdraw"
      | "redeem"
      | "removeListing"
      | "revertIfInsufficientFunds"
      | "revertIfNotTradeableWithVault"
      | "revertIfOptionInvalid"
      | "revertIfOutOfDTEBounds"
      | "revertIfOutOfDeltaBounds"
      | "setAlphaCLevel"
      | "setIsCall"
      | "setLastManagementFeeTimestamp"
      | "setLastSpreadUnlockUpdate"
      | "setLastTradeTimestamp"
      | "setListingsAndSizes"
      | "setManagementFeeRate"
      | "setMaxClevel"
      | "setMaxMaturity"
      | "setMinMaturity"
      | "setPerformanceFeeRate"
      | "setProtocolFees"
      | "setSpotPrice"
      | "setTimestamp"
      | "setTotalAssets"
      | "setTotalLockedAssets"
      | "settle"
      | "settleMaturity"
      | "spreadUnlockingRate"
      | "spreadUnlockingTicks"
      | "symbol"
      | "totalAssets"
      | "totalLockedAssets"
      | "totalLockedSpread"
      | "totalSupply"
      | "trade"
      | "transfer"
      | "transferFrom"
      | "updateSettings"
      | "updateState"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Borrow"
      | "BorrowLiquidated"
      | "ClaimProtocolFees"
      | "Deposit"
      | "ManagementFeePaid"
      | "PerformanceFeePaid"
      | "RepayBorrow"
      | "Swap"
      | "Trade"
      | "Transfer"
      | "UpdateQuotes"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "afterBuy",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDeposit",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "asset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeWithdraw",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "chargeManagementFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clearListingsAndSizes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computeCLevel",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeManagementFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "contains",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertAssetFromUD60x18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertAssetToUD60x18",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertToShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decreasePositionSize",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlackScholesPrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getClevelParams",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDelta",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getLastManagementFeeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastTradeTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLockedSpreadInternal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaturityAfterTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMaxMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfListings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfListingsOnMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfUnexpiredListings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddress",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPositionSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPricePerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuote",
    values: [IPoolFactory.PoolKeyStruct, BigNumberish, boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSettlementPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSpotPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalFairValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLiabilities",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLiabilitiesExpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalLiabilitiesUnexpired",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTradeBounds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increasePositionSize",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSpreadUnlockingRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSpreadUnlockingTick",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalLockedAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalLockedAssetsNoTransfer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalLockedSpread",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseTotalShares",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertMaturity",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "insertStrike",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isCall", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastSpreadUnlockUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxDeposit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxMint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxRedeem",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxWithdraw",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "minMaturity",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFromPool",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintMock",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "positionSize",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewDeposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewMint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewRedeem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "previewWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeListing",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfInsufficientFunds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfNotTradeableWithVault",
    values: [boolean, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfOptionInvalid",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfOutOfDTEBounds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revertIfOutOfDeltaBounds",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setAlphaCLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setIsCall", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "setLastManagementFeeTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastSpreadUnlockUpdate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLastTradeTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setListingsAndSizes",
    values: [UnderwriterVaultMock.MaturityInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxClevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPerformanceFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSpotPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTimestamp",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTotalLockedAssets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "settle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "settleMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "spreadUnlockingRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "spreadUnlockingTicks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockedSpread",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [
      IPoolFactory.PoolKeyStruct,
      BigNumberish,
      boolean,
      BigNumberish,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSettings",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addListing", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterBuy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "afterDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "asset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "beforeWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "chargeManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clearListingsAndSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeCLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeManagementFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contains", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertAssetFromUD60x18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertAssetToUD60x18",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertToShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreasePositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlackScholesPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClevelParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getDelta", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLastManagementFeeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastTradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLockedSpreadInternal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaturityAfterTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaxMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfListingsOnMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfUnexpiredListings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPricePerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getQuote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSettlementPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalFairValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLiabilities",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLiabilitiesExpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalLiabilitiesUnexpired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradeBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increasePositionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSpreadUnlockingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseSpreadUnlockingTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalLockedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalLockedAssetsNoTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalLockedSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseTotalShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertStrike",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastSpreadUnlockUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxMint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRedeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFromPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintMock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "positionSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "previewWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeListing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfInsufficientFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfNotTradeableWithVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfOptionInvalid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfOutOfDTEBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revertIfOutOfDeltaBounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAlphaCLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setIsCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLastManagementFeeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastSpreadUnlockUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLastTradeTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setListingsAndSizes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxClevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPerformanceFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSpotPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTotalLockedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadUnlockingRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "spreadUnlockingTicks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockedSpread",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowEvent {
  export type InputTuple = [
    borrowId: BytesLike,
    from: AddressLike,
    borrowToken: AddressLike,
    collateralToken: AddressLike,
    sizeBorrowed: BigNumberish,
    collateralLocked: BigNumberish,
    borrowFee: BigNumberish
  ];
  export type OutputTuple = [
    borrowId: string,
    from: string,
    borrowToken: string,
    collateralToken: string,
    sizeBorrowed: bigint,
    collateralLocked: bigint,
    borrowFee: bigint
  ];
  export interface OutputObject {
    borrowId: string;
    from: string;
    borrowToken: string;
    collateralToken: string;
    sizeBorrowed: bigint;
    collateralLocked: bigint;
    borrowFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BorrowLiquidatedEvent {
  export type InputTuple = [
    borrowId: BytesLike,
    from: AddressLike,
    collateralToken: AddressLike,
    collateralLiquidated: BigNumberish
  ];
  export type OutputTuple = [
    borrowId: string,
    from: string,
    collateralToken: string,
    collateralLiquidated: bigint
  ];
  export interface OutputObject {
    borrowId: string;
    from: string;
    collateralToken: string;
    collateralLiquidated: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimProtocolFeesEvent {
  export type InputTuple = [
    feeReceiver: AddressLike,
    feesClaimed: BigNumberish
  ];
  export type OutputTuple = [feeReceiver: string, feesClaimed: bigint];
  export interface OutputObject {
    feeReceiver: string;
    feesClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    caller: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagementFeePaidEvent {
  export type InputTuple = [
    recipient: AddressLike,
    managementFee: BigNumberish
  ];
  export type OutputTuple = [recipient: string, managementFee: bigint];
  export interface OutputObject {
    recipient: string;
    managementFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PerformanceFeePaidEvent {
  export type InputTuple = [
    recipient: AddressLike,
    performanceFee: BigNumberish
  ];
  export type OutputTuple = [recipient: string, performanceFee: bigint];
  export interface OutputObject {
    recipient: string;
    performanceFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RepayBorrowEvent {
  export type InputTuple = [
    borrowId: BytesLike,
    from: AddressLike,
    borrowToken: AddressLike,
    collateralToken: AddressLike,
    amountRepaid: BigNumberish,
    collateralUnlocked: BigNumberish,
    repayFee: BigNumberish
  ];
  export type OutputTuple = [
    borrowId: string,
    from: string,
    borrowToken: string,
    collateralToken: string,
    amountRepaid: bigint,
    collateralUnlocked: bigint,
    repayFee: bigint
  ];
  export interface OutputObject {
    borrowId: string;
    from: string;
    borrowToken: string;
    collateralToken: string;
    amountRepaid: bigint;
    collateralUnlocked: bigint;
    repayFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SwapEvent {
  export type InputTuple = [
    sender: AddressLike,
    recipient: AddressLike,
    tokenIn: AddressLike,
    tokenOut: AddressLike,
    amountIn: BigNumberish,
    amountOut: BigNumberish,
    takerFee: BigNumberish,
    makerRebate: BigNumberish,
    vaultFee: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    recipient: string,
    tokenIn: string,
    tokenOut: string,
    amountIn: bigint,
    amountOut: bigint,
    takerFee: bigint,
    makerRebate: bigint,
    vaultFee: bigint
  ];
  export interface OutputObject {
    sender: string;
    recipient: string;
    tokenIn: string;
    tokenOut: string;
    amountIn: bigint;
    amountOut: bigint;
    takerFee: bigint;
    makerRebate: bigint;
    vaultFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    user: AddressLike,
    pool: AddressLike,
    contractSize: BigNumberish,
    isBuy: boolean,
    premium: BigNumberish,
    takerFee: BigNumberish,
    makerRebate: BigNumberish,
    vaultFee: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    pool: string,
    contractSize: bigint,
    isBuy: boolean,
    premium: bigint,
    takerFee: bigint,
    makerRebate: bigint,
    vaultFee: bigint
  ];
  export interface OutputObject {
    user: string;
    pool: string;
    contractSize: bigint;
    isBuy: boolean;
    premium: bigint;
    takerFee: bigint;
    makerRebate: bigint;
    vaultFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateQuotesEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    caller: AddressLike,
    receiver: AddressLike,
    owner: AddressLike,
    assets: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    caller: string,
    receiver: string,
    owner: string,
    assets: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    caller: string;
    receiver: string;
    owner: string;
    assets: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UnderwriterVaultMock extends BaseContract {
  connect(runner?: ContractRunner | null): UnderwriterVaultMock;
  waitForDeployment(): Promise<this>;

  interface: UnderwriterVaultMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  addListing: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  afterBuy: TypedContractMethod<
    [
      strike: BigNumberish,
      maturity: BigNumberish,
      size: BigNumberish,
      spread: BigNumberish,
      premium: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  afterDeposit: TypedContractMethod<
    [
      receiver: AddressLike,
      assetAmount: BigNumberish,
      shareAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  allowance: TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  asset: TypedContractMethod<[], [string], "view">;

  assetDecimals: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  beforeWithdraw: TypedContractMethod<
    [
      receiver: AddressLike,
      assetAmount: BigNumberish,
      shareAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  chargeManagementFees: TypedContractMethod<[], [void], "nonpayable">;

  claimFees: TypedContractMethod<[], [void], "nonpayable">;

  clearListingsAndSizes: TypedContractMethod<[], [void], "nonpayable">;

  computeCLevel: TypedContractMethod<
    [
      utilisation: BigNumberish,
      duration: BigNumberish,
      alpha: BigNumberish,
      minCLevel: BigNumberish,
      maxCLevel: BigNumberish,
      decayRate: BigNumberish
    ],
    [bigint],
    "view"
  >;

  computeManagementFees: TypedContractMethod<[], [bigint], "view">;

  contains: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [boolean],
    "view"
  >;

  convertAssetFromUD60x18: TypedContractMethod<
    [value: BigNumberish],
    [bigint],
    "view"
  >;

  convertAssetToUD60x18: TypedContractMethod<
    [value: BigNumberish],
    [bigint],
    "view"
  >;

  convertToAssets: TypedContractMethod<
    [shareAmount: BigNumberish],
    [bigint],
    "view"
  >;

  convertToShares: TypedContractMethod<
    [assetAmount: BigNumberish],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  decreasePositionSize: TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish, posSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [assetAmount: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getAvailableAssets: TypedContractMethod<[], [bigint], "view">;

  getBlackScholesPrice: TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      tau: BigNumberish,
      sigma: BigNumberish,
      rfRate: BigNumberish,
      isCallOption: boolean
    ],
    [bigint],
    "view"
  >;

  getClevelParams: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  getDelta: TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      tau: BigNumberish,
      sigma: BigNumberish,
      rfRate: BigNumberish,
      isCallOption: boolean
    ],
    [bigint],
    "view"
  >;

  getLastManagementFeeTimestamp: TypedContractMethod<[], [bigint], "view">;

  getLastTradeTimestamp: TypedContractMethod<[], [bigint], "view">;

  getLockedSpreadInternal: TypedContractMethod<
    [],
    [IUnderwriterVault.LockedSpreadInternalStructOutput],
    "view"
  >;

  getMaturityAfterTimestamp: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getMaxMaturity: TypedContractMethod<[], [bigint], "view">;

  getMinMaturity: TypedContractMethod<[], [bigint], "view">;

  getNumberOfListings: TypedContractMethod<[], [bigint], "view">;

  getNumberOfListingsOnMaturity: TypedContractMethod<
    [maturity: BigNumberish],
    [bigint],
    "view"
  >;

  getNumberOfUnexpiredListings: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getPoolAddress: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [string],
    "view"
  >;

  getPositionSize: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [bigint],
    "view"
  >;

  getPricePerShare: TypedContractMethod<[], [bigint], "view">;

  getProtocolFees: TypedContractMethod<[], [bigint], "view">;

  getQuote: TypedContractMethod<
    [
      poolKey: IPoolFactory.PoolKeyStruct,
      size: BigNumberish,
      isBuy: boolean,
      taker: AddressLike
    ],
    [bigint],
    "view"
  >;

  getSettlementPrice: TypedContractMethod<
    [timestamp: BigNumberish],
    [bigint],
    "view"
  >;

  getSpotPrice: TypedContractMethod<[], [bigint], "view">;

  getTotalFairValue: TypedContractMethod<[], [bigint], "view">;

  getTotalLiabilities: TypedContractMethod<[], [bigint], "view">;

  getTotalLiabilitiesExpired: TypedContractMethod<[], [bigint], "view">;

  getTotalLiabilitiesUnexpired: TypedContractMethod<[], [bigint], "view">;

  getTradeBounds: TypedContractMethod<
    [],
    [[bigint, bigint, bigint, bigint]],
    "view"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  increasePositionSize: TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish, posSize: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseSpreadUnlockingRate: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseSpreadUnlockingTick: TypedContractMethod<
    [maturity: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseTotalAssets: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseTotalLockedAssets: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseTotalLockedAssetsNoTransfer: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseTotalLockedSpread: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseTotalShares: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  insertMaturity: TypedContractMethod<
    [maturity: BigNumberish, newMaturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  insertStrike: TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish],
    [void],
    "nonpayable"
  >;

  isCall: TypedContractMethod<[], [boolean], "view">;

  lastSpreadUnlockUpdate: TypedContractMethod<[], [bigint], "view">;

  maxDeposit: TypedContractMethod<[receiver: AddressLike], [bigint], "view">;

  maxMaturity: TypedContractMethod<[], [bigint], "view">;

  maxMint: TypedContractMethod<[receiver: AddressLike], [bigint], "view">;

  maxRedeem: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  maxWithdraw: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  minMaturity: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [shareAmount: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;

  mintFromPool: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish, size: BigNumberish],
    [void],
    "nonpayable"
  >;

  mintMock: TypedContractMethod<
    [receiver: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  positionSize: TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish],
    [bigint],
    "view"
  >;

  previewDeposit: TypedContractMethod<
    [assetAmount: BigNumberish],
    [bigint],
    "view"
  >;

  previewMint: TypedContractMethod<
    [shareAmount: BigNumberish],
    [bigint],
    "view"
  >;

  previewRedeem: TypedContractMethod<
    [shareAmount: BigNumberish],
    [bigint],
    "view"
  >;

  previewWithdraw: TypedContractMethod<
    [assetAmount: BigNumberish],
    [bigint],
    "view"
  >;

  redeem: TypedContractMethod<
    [shareAmount: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  removeListing: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  revertIfInsufficientFunds: TypedContractMethod<
    [strike: BigNumberish, size: BigNumberish, availableAssets: BigNumberish],
    [void],
    "view"
  >;

  revertIfNotTradeableWithVault: TypedContractMethod<
    [isCallVault: boolean, isCallOption: boolean, isBuy: boolean],
    [void],
    "view"
  >;

  revertIfOptionInvalid: TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [void],
    "view"
  >;

  revertIfOutOfDTEBounds: TypedContractMethod<
    [value: BigNumberish, minimum: BigNumberish, maximum: BigNumberish],
    [void],
    "view"
  >;

  revertIfOutOfDeltaBounds: TypedContractMethod<
    [value: BigNumberish, minimum: BigNumberish, maximum: BigNumberish],
    [void],
    "view"
  >;

  setAlphaCLevel: TypedContractMethod<
    [alphaCLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setIsCall: TypedContractMethod<[value: boolean], [void], "nonpayable">;

  setLastManagementFeeTimestamp: TypedContractMethod<
    [timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLastSpreadUnlockUpdate: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setLastTradeTimestamp: TypedContractMethod<
    [timestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setListingsAndSizes: TypedContractMethod<
    [infos: UnderwriterVaultMock.MaturityInfoStruct[]],
    [void],
    "nonpayable"
  >;

  setManagementFeeRate: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxClevel: TypedContractMethod<
    [maxCLevel: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMaxMaturity: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinMaturity: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPerformanceFeeRate: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFees: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSpotPrice: TypedContractMethod<
    [newSpot: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTimestamp: TypedContractMethod<
    [newTimestamp: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalAssets: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTotalLockedAssets: TypedContractMethod<
    [value: BigNumberish],
    [void],
    "nonpayable"
  >;

  settle: TypedContractMethod<[], [void], "nonpayable">;

  settleMaturity: TypedContractMethod<
    [maturity: BigNumberish],
    [void],
    "nonpayable"
  >;

  spreadUnlockingRate: TypedContractMethod<[], [bigint], "view">;

  spreadUnlockingTicks: TypedContractMethod<
    [maturity: BigNumberish],
    [bigint],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalAssets: TypedContractMethod<[], [bigint], "view">;

  totalLockedAssets: TypedContractMethod<[], [bigint], "view">;

  totalLockedSpread: TypedContractMethod<[], [bigint], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  trade: TypedContractMethod<
    [
      poolKey: IPoolFactory.PoolKeyStruct,
      size: BigNumberish,
      isBuy: boolean,
      premiumLimit: BigNumberish,
      referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateSettings: TypedContractMethod<
    [settings: BytesLike],
    [void],
    "nonpayable"
  >;

  updateState: TypedContractMethod<[], [void], "nonpayable">;

  withdraw: TypedContractMethod<
    [assetAmount: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addListing"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterBuy"
  ): TypedContractMethod<
    [
      strike: BigNumberish,
      maturity: BigNumberish,
      size: BigNumberish,
      spread: BigNumberish,
      premium: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "afterDeposit"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      assetAmount: BigNumberish,
      shareAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "asset"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "assetDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "beforeWithdraw"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      assetAmount: BigNumberish,
      shareAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "chargeManagementFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "clearListingsAndSizes"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "computeCLevel"
  ): TypedContractMethod<
    [
      utilisation: BigNumberish,
      duration: BigNumberish,
      alpha: BigNumberish,
      minCLevel: BigNumberish,
      maxCLevel: BigNumberish,
      decayRate: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "computeManagementFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "contains"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "convertAssetFromUD60x18"
  ): TypedContractMethod<[value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertAssetToUD60x18"
  ): TypedContractMethod<[value: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToAssets"
  ): TypedContractMethod<[shareAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "convertToShares"
  ): TypedContractMethod<[assetAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decreasePositionSize"
  ): TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish, posSize: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [assetAmount: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailableAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlackScholesPrice"
  ): TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      tau: BigNumberish,
      sigma: BigNumberish,
      rfRate: BigNumberish,
      isCallOption: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClevelParams"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getDelta"
  ): TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      tau: BigNumberish,
      sigma: BigNumberish,
      rfRate: BigNumberish,
      isCallOption: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLastManagementFeeTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLastTradeTimestamp"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLockedSpreadInternal"
  ): TypedContractMethod<
    [],
    [IUnderwriterVault.LockedSpreadInternalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMaturityAfterTimestamp"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaxMaturity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinMaturity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfListings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfListingsOnMaturity"
  ): TypedContractMethod<[maturity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNumberOfUnexpiredListings"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPoolAddress"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPositionSize"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPricePerShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProtocolFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuote"
  ): TypedContractMethod<
    [
      poolKey: IPoolFactory.PoolKeyStruct,
      size: BigNumberish,
      isBuy: boolean,
      taker: AddressLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSettlementPrice"
  ): TypedContractMethod<[timestamp: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSpotPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalFairValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalLiabilities"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalLiabilitiesExpired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalLiabilitiesUnexpired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTradeBounds"
  ): TypedContractMethod<[], [[bigint, bigint, bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increasePositionSize"
  ): TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish, posSize: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseSpreadUnlockingRate"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseSpreadUnlockingTick"
  ): TypedContractMethod<
    [maturity: BigNumberish, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseTotalAssets"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseTotalLockedAssets"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseTotalLockedAssetsNoTransfer"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseTotalLockedSpread"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "increaseTotalShares"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "insertMaturity"
  ): TypedContractMethod<
    [maturity: BigNumberish, newMaturity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "insertStrike"
  ): TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isCall"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "lastSpreadUnlockUpdate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDeposit"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMaturity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxMint"
  ): TypedContractMethod<[receiver: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRedeem"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxWithdraw"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "minMaturity"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [shareAmount: BigNumberish, receiver: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintFromPool"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish, size: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mintMock"
  ): TypedContractMethod<
    [receiver: AddressLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "positionSize"
  ): TypedContractMethod<
    [maturity: BigNumberish, strike: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "previewDeposit"
  ): TypedContractMethod<[assetAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewMint"
  ): TypedContractMethod<[shareAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewRedeem"
  ): TypedContractMethod<[shareAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "previewWithdraw"
  ): TypedContractMethod<[assetAmount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "redeem"
  ): TypedContractMethod<
    [shareAmount: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeListing"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revertIfInsufficientFunds"
  ): TypedContractMethod<
    [strike: BigNumberish, size: BigNumberish, availableAssets: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "revertIfNotTradeableWithVault"
  ): TypedContractMethod<
    [isCallVault: boolean, isCallOption: boolean, isBuy: boolean],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "revertIfOptionInvalid"
  ): TypedContractMethod<
    [strike: BigNumberish, maturity: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "revertIfOutOfDTEBounds"
  ): TypedContractMethod<
    [value: BigNumberish, minimum: BigNumberish, maximum: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "revertIfOutOfDeltaBounds"
  ): TypedContractMethod<
    [value: BigNumberish, minimum: BigNumberish, maximum: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "setAlphaCLevel"
  ): TypedContractMethod<[alphaCLevel: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setIsCall"
  ): TypedContractMethod<[value: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLastManagementFeeTimestamp"
  ): TypedContractMethod<[timestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLastSpreadUnlockUpdate"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLastTradeTimestamp"
  ): TypedContractMethod<[timestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setListingsAndSizes"
  ): TypedContractMethod<
    [infos: UnderwriterVaultMock.MaturityInfoStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setManagementFeeRate"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxClevel"
  ): TypedContractMethod<[maxCLevel: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMaxMaturity"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinMaturity"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPerformanceFeeRate"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFees"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSpotPrice"
  ): TypedContractMethod<[newSpot: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTimestamp"
  ): TypedContractMethod<[newTimestamp: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalAssets"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTotalLockedAssets"
  ): TypedContractMethod<[value: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settle"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settleMaturity"
  ): TypedContractMethod<[maturity: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "spreadUnlockingRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "spreadUnlockingTicks"
  ): TypedContractMethod<[maturity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLockedAssets"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalLockedSpread"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "trade"
  ): TypedContractMethod<
    [
      poolKey: IPoolFactory.PoolKeyStruct,
      size: BigNumberish,
      isBuy: boolean,
      premiumLimit: BigNumberish,
      referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateSettings"
  ): TypedContractMethod<[settings: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateState"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [assetAmount: BigNumberish, receiver: AddressLike, owner: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Borrow"
  ): TypedContractEvent<
    BorrowEvent.InputTuple,
    BorrowEvent.OutputTuple,
    BorrowEvent.OutputObject
  >;
  getEvent(
    key: "BorrowLiquidated"
  ): TypedContractEvent<
    BorrowLiquidatedEvent.InputTuple,
    BorrowLiquidatedEvent.OutputTuple,
    BorrowLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimProtocolFees"
  ): TypedContractEvent<
    ClaimProtocolFeesEvent.InputTuple,
    ClaimProtocolFeesEvent.OutputTuple,
    ClaimProtocolFeesEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ManagementFeePaid"
  ): TypedContractEvent<
    ManagementFeePaidEvent.InputTuple,
    ManagementFeePaidEvent.OutputTuple,
    ManagementFeePaidEvent.OutputObject
  >;
  getEvent(
    key: "PerformanceFeePaid"
  ): TypedContractEvent<
    PerformanceFeePaidEvent.InputTuple,
    PerformanceFeePaidEvent.OutputTuple,
    PerformanceFeePaidEvent.OutputObject
  >;
  getEvent(
    key: "RepayBorrow"
  ): TypedContractEvent<
    RepayBorrowEvent.InputTuple,
    RepayBorrowEvent.OutputTuple,
    RepayBorrowEvent.OutputObject
  >;
  getEvent(
    key: "Swap"
  ): TypedContractEvent<
    SwapEvent.InputTuple,
    SwapEvent.OutputTuple,
    SwapEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "UpdateQuotes"
  ): TypedContractEvent<
    UpdateQuotesEvent.InputTuple,
    UpdateQuotesEvent.OutputTuple,
    UpdateQuotesEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Borrow(bytes32,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;
    Borrow: TypedContractEvent<
      BorrowEvent.InputTuple,
      BorrowEvent.OutputTuple,
      BorrowEvent.OutputObject
    >;

    "BorrowLiquidated(bytes32,address,address,uint256)": TypedContractEvent<
      BorrowLiquidatedEvent.InputTuple,
      BorrowLiquidatedEvent.OutputTuple,
      BorrowLiquidatedEvent.OutputObject
    >;
    BorrowLiquidated: TypedContractEvent<
      BorrowLiquidatedEvent.InputTuple,
      BorrowLiquidatedEvent.OutputTuple,
      BorrowLiquidatedEvent.OutputObject
    >;

    "ClaimProtocolFees(address,uint256)": TypedContractEvent<
      ClaimProtocolFeesEvent.InputTuple,
      ClaimProtocolFeesEvent.OutputTuple,
      ClaimProtocolFeesEvent.OutputObject
    >;
    ClaimProtocolFees: TypedContractEvent<
      ClaimProtocolFeesEvent.InputTuple,
      ClaimProtocolFeesEvent.OutputTuple,
      ClaimProtocolFeesEvent.OutputObject
    >;

    "Deposit(address,address,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ManagementFeePaid(address,uint256)": TypedContractEvent<
      ManagementFeePaidEvent.InputTuple,
      ManagementFeePaidEvent.OutputTuple,
      ManagementFeePaidEvent.OutputObject
    >;
    ManagementFeePaid: TypedContractEvent<
      ManagementFeePaidEvent.InputTuple,
      ManagementFeePaidEvent.OutputTuple,
      ManagementFeePaidEvent.OutputObject
    >;

    "PerformanceFeePaid(address,uint256)": TypedContractEvent<
      PerformanceFeePaidEvent.InputTuple,
      PerformanceFeePaidEvent.OutputTuple,
      PerformanceFeePaidEvent.OutputObject
    >;
    PerformanceFeePaid: TypedContractEvent<
      PerformanceFeePaidEvent.InputTuple,
      PerformanceFeePaidEvent.OutputTuple,
      PerformanceFeePaidEvent.OutputObject
    >;

    "RepayBorrow(bytes32,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;
    RepayBorrow: TypedContractEvent<
      RepayBorrowEvent.InputTuple,
      RepayBorrowEvent.OutputTuple,
      RepayBorrowEvent.OutputObject
    >;

    "Swap(address,address,address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;
    Swap: TypedContractEvent<
      SwapEvent.InputTuple,
      SwapEvent.OutputTuple,
      SwapEvent.OutputObject
    >;

    "Trade(address,address,uint256,bool,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "UpdateQuotes()": TypedContractEvent<
      UpdateQuotesEvent.InputTuple,
      UpdateQuotesEvent.OutputTuple,
      UpdateQuotesEvent.OutputObject
    >;
    UpdateQuotes: TypedContractEvent<
      UpdateQuotesEvent.InputTuple,
      UpdateQuotesEvent.OutputTuple,
      UpdateQuotesEvent.OutputObject
    >;

    "Withdraw(address,address,address,uint256,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
