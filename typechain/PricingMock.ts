/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Pricing {
  export type ArgsStruct = {
    liquidityRate: BigNumberish;
    marketPrice: BigNumberish;
    lower: BigNumberish;
    upper: BigNumberish;
    isBuy: boolean;
  };

  export type ArgsStructOutput = [
    liquidityRate: bigint,
    marketPrice: bigint,
    lower: bigint,
    upper: bigint,
    isBuy: boolean
  ] & {
    liquidityRate: bigint;
    marketPrice: bigint;
    lower: bigint;
    upper: bigint;
    isBuy: boolean;
  };
}

export interface PricingMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "amountOfTicksBetween"
      | "askLiquidity"
      | "bidLiquidity"
      | "liquidity"
      | "maxTradeSize"
      | "nextPrice"
      | "price"
      | "proportion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountOfTicksBetween",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "askLiquidity",
    values: [Pricing.ArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "bidLiquidity",
    values: [Pricing.ArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidity",
    values: [Pricing.ArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "maxTradeSize",
    values: [Pricing.ArgsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "nextPrice",
    values: [Pricing.ArgsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "price",
    values: [Pricing.ArgsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proportion",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "amountOfTicksBetween",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "askLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bidLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxTradeSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proportion", data: BytesLike): Result;
}

export interface PricingMock extends BaseContract {
  connect(runner?: ContractRunner | null): PricingMock;
  waitForDeployment(): Promise<this>;

  interface: PricingMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  amountOfTicksBetween: TypedContractMethod<
    [lower: BigNumberish, upper: BigNumberish],
    [bigint],
    "view"
  >;

  askLiquidity: TypedContractMethod<
    [args: Pricing.ArgsStruct],
    [bigint],
    "view"
  >;

  bidLiquidity: TypedContractMethod<
    [args: Pricing.ArgsStruct],
    [bigint],
    "view"
  >;

  liquidity: TypedContractMethod<[args: Pricing.ArgsStruct], [bigint], "view">;

  maxTradeSize: TypedContractMethod<
    [args: Pricing.ArgsStruct],
    [bigint],
    "view"
  >;

  nextPrice: TypedContractMethod<
    [args: Pricing.ArgsStruct, tradeSize: BigNumberish],
    [bigint],
    "view"
  >;

  price: TypedContractMethod<
    [args: Pricing.ArgsStruct, tradeSize: BigNumberish],
    [bigint],
    "view"
  >;

  proportion: TypedContractMethod<
    [lower: BigNumberish, upper: BigNumberish, marketPrice: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "amountOfTicksBetween"
  ): TypedContractMethod<
    [lower: BigNumberish, upper: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "askLiquidity"
  ): TypedContractMethod<[args: Pricing.ArgsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "bidLiquidity"
  ): TypedContractMethod<[args: Pricing.ArgsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "liquidity"
  ): TypedContractMethod<[args: Pricing.ArgsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxTradeSize"
  ): TypedContractMethod<[args: Pricing.ArgsStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextPrice"
  ): TypedContractMethod<
    [args: Pricing.ArgsStruct, tradeSize: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<
    [args: Pricing.ArgsStruct, tradeSize: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "proportion"
  ): TypedContractMethod<
    [lower: BigNumberish, upper: BigNumberish, marketPrice: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
