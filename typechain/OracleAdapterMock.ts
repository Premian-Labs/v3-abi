/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OracleAdapterMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "describePricingPath"
      | "getPrice"
      | "getPriceAt"
      | "setPrice"
      | "setPriceAt(uint256,uint256)"
      | "setPriceAt(uint256)"
      | "upsertPair"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "describePricingPath",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAt",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceAt(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceAt(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upsertPair",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "describePricingPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPriceAt(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceAt(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upsertPair", data: BytesLike): Result;
}

export interface OracleAdapterMock extends BaseContract {
  connect(runner?: ContractRunner | null): OracleAdapterMock;
  waitForDeployment(): Promise<this>;

  interface: OracleAdapterMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  describePricingPath: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string[][], bigint[]] & {
        adapterType: bigint;
        path: string[][];
        decimals: bigint[];
      }
    ],
    "view"
  >;

  getPrice: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;

  getPriceAt: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, maturity: BigNumberish],
    [bigint],
    "view"
  >;

  setPrice: TypedContractMethod<
    [_getPriceAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setPriceAt(uint256,uint256)": TypedContractMethod<
    [maturity: BigNumberish, _getPriceAtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  "setPriceAt(uint256)": TypedContractMethod<
    [_getPriceAtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  upsertPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "describePricingPath"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string[][], bigint[]] & {
        adapterType: bigint;
        path: string[][];
        decimals: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceAt"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, maturity: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setPrice"
  ): TypedContractMethod<[_getPriceAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setPriceAt(uint256,uint256)"
  ): TypedContractMethod<
    [maturity: BigNumberish, _getPriceAtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPriceAt(uint256)"
  ): TypedContractMethod<
    [_getPriceAtAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upsertPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  filters: {};
}
