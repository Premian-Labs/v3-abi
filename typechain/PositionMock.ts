/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Position {
  export type KeyInternalStruct = {
    owner: AddressLike;
    operator: AddressLike;
    lower: BigNumberish;
    upper: BigNumberish;
    orderType: BigNumberish;
    isCall: boolean;
    strike: BigNumberish;
  };

  export type KeyInternalStructOutput = [
    owner: string,
    operator: string,
    lower: bigint,
    upper: bigint,
    orderType: bigint,
    isCall: boolean,
    strike: bigint
  ] & {
    owner: string;
    operator: string;
    lower: bigint;
    upper: bigint;
    orderType: bigint;
    isCall: boolean;
    strike: bigint;
  };

  export type DeltaStruct = {
    collateral: BigNumberish;
    longs: BigNumberish;
    shorts: BigNumberish;
  };

  export type DeltaStructOutput = [
    collateral: bigint,
    longs: bigint,
    shorts: bigint
  ] & { collateral: bigint; longs: bigint; shorts: bigint };
}

export interface PositionMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bid"
      | "calculatePositionUpdate"
      | "collateral"
      | "collateralToContracts"
      | "contracts"
      | "contractsToCollateral"
      | "isLong"
      | "isShort"
      | "keyHash"
      | "liquidityPerTick"
      | "long"
      | "pieceWiseLinear"
      | "pieceWiseQuadratic"
      | "short"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bid",
    values: [Position.KeyInternalStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePositionUpdate",
    values: [
      Position.KeyInternalStruct,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collateral",
    values: [Position.KeyInternalStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "collateralToContracts",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "contracts",
    values: [Position.KeyInternalStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contractsToCollateral",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "isLong",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isShort",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyHash",
    values: [Position.KeyInternalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPerTick",
    values: [Position.KeyInternalStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "long",
    values: [Position.KeyInternalStruct, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceWiseLinear",
    values: [Position.KeyInternalStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pieceWiseQuadratic",
    values: [Position.KeyInternalStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "short",
    values: [Position.KeyInternalStruct, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculatePositionUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "collateral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralToContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contracts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contractsToCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isLong", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isShort", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keyHash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPerTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "long", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pieceWiseLinear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pieceWiseQuadratic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "short", data: BytesLike): Result;
}

export interface PositionMock extends BaseContract {
  connect(runner?: ContractRunner | null): PositionMock;
  waitForDeployment(): Promise<this>;

  interface: PositionMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bid: TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  calculatePositionUpdate: TypedContractMethod<
    [
      self: Position.KeyInternalStruct,
      currentBalance: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish
    ],
    [Position.DeltaStructOutput],
    "view"
  >;

  collateral: TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  collateralToContracts: TypedContractMethod<
    [_collateral: BigNumberish, strike: BigNumberish, isCall: boolean],
    [bigint],
    "view"
  >;

  contracts: TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  contractsToCollateral: TypedContractMethod<
    [_collateral: BigNumberish, strike: BigNumberish, isCall: boolean],
    [bigint],
    "view"
  >;

  isLong: TypedContractMethod<[orderType: BigNumberish], [boolean], "view">;

  isShort: TypedContractMethod<[orderType: BigNumberish], [boolean], "view">;

  keyHash: TypedContractMethod<
    [self: Position.KeyInternalStruct],
    [string],
    "view"
  >;

  liquidityPerTick: TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish],
    [bigint],
    "view"
  >;

  long: TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  pieceWiseLinear: TypedContractMethod<
    [self: Position.KeyInternalStruct, price: BigNumberish],
    [bigint],
    "view"
  >;

  pieceWiseQuadratic: TypedContractMethod<
    [self: Position.KeyInternalStruct, price: BigNumberish],
    [bigint],
    "view"
  >;

  short: TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bid"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculatePositionUpdate"
  ): TypedContractMethod<
    [
      self: Position.KeyInternalStruct,
      currentBalance: BigNumberish,
      amount: BigNumberish,
      price: BigNumberish
    ],
    [Position.DeltaStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateral"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "collateralToContracts"
  ): TypedContractMethod<
    [_collateral: BigNumberish, strike: BigNumberish, isCall: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "contracts"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "contractsToCollateral"
  ): TypedContractMethod<
    [_collateral: BigNumberish, strike: BigNumberish, isCall: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLong"
  ): TypedContractMethod<[orderType: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isShort"
  ): TypedContractMethod<[orderType: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "keyHash"
  ): TypedContractMethod<[self: Position.KeyInternalStruct], [string], "view">;
  getFunction(
    nameOrSignature: "liquidityPerTick"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "long"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pieceWiseLinear"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "pieceWiseQuadratic"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, price: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "short"
  ): TypedContractMethod<
    [self: Position.KeyInternalStruct, size: BigNumberish, price: BigNumberish],
    [bigint],
    "view"
  >;

  filters: {};
}
