/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPoolFactory {
  export type PoolKeyStruct = {
    base: AddressLike;
    quote: AddressLike;
    oracleAdapter: AddressLike;
    strike: BigNumberish;
    maturity: BigNumberish;
    isCallPool: boolean;
  };

  export type PoolKeyStructOutput = [
    base: string,
    quote: string,
    oracleAdapter: string,
    strike: bigint,
    maturity: bigint,
    isCallPool: boolean
  ] & {
    base: string;
    quote: string;
    oracleAdapter: string;
    strike: bigint;
    maturity: bigint;
    isCallPool: boolean;
  };
}

export declare namespace OrderbookStream {
  export type SignatureStruct = { r: BytesLike; s: BytesLike; v: BigNumberish };

  export type SignatureStructOutput = [r: string, s: string, v: bigint] & {
    r: string;
    s: string;
    v: bigint;
  };

  export type QuoteStruct = {
    poolKey: IPoolFactory.PoolKeyStruct;
    provider: AddressLike;
    taker: AddressLike;
    price: BigNumberish;
    size: BigNumberish;
    isBuy: boolean;
    deadline: BigNumberish;
    salt: BigNumberish;
    signature: OrderbookStream.SignatureStruct;
  };

  export type QuoteStructOutput = [
    poolKey: IPoolFactory.PoolKeyStructOutput,
    provider: string,
    taker: string,
    price: bigint,
    size: bigint,
    isBuy: boolean,
    deadline: bigint,
    salt: bigint,
    signature: OrderbookStream.SignatureStructOutput
  ] & {
    poolKey: IPoolFactory.PoolKeyStructOutput;
    provider: string;
    taker: string;
    price: bigint;
    size: bigint;
    isBuy: boolean;
    deadline: bigint;
    salt: bigint;
    signature: OrderbookStream.SignatureStructOutput;
  };
}

export interface OrderbookStreamInterface extends Interface {
  getFunction(nameOrSignature: "add"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "PublishQuote"): EventFragment;

  encodeFunctionData(
    functionFragment: "add",
    values: [OrderbookStream.QuoteStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "add", data: BytesLike): Result;
}

export namespace PublishQuoteEvent {
  export type InputTuple = [
    poolKeyHash: IPoolFactory.PoolKeyStruct,
    provider: AddressLike,
    taker: AddressLike,
    price: BigNumberish,
    size: BigNumberish,
    isBuy: boolean,
    deadline: BigNumberish,
    salt: BigNumberish,
    signature: OrderbookStream.SignatureStruct,
    poolKey: IPoolFactory.PoolKeyStruct
  ];
  export type OutputTuple = [
    poolKeyHash: IPoolFactory.PoolKeyStructOutput,
    provider: string,
    taker: string,
    price: bigint,
    size: bigint,
    isBuy: boolean,
    deadline: bigint,
    salt: bigint,
    signature: OrderbookStream.SignatureStructOutput,
    poolKey: IPoolFactory.PoolKeyStructOutput
  ];
  export interface OutputObject {
    poolKeyHash: IPoolFactory.PoolKeyStructOutput;
    provider: string;
    taker: string;
    price: bigint;
    size: bigint;
    isBuy: boolean;
    deadline: bigint;
    salt: bigint;
    signature: OrderbookStream.SignatureStructOutput;
    poolKey: IPoolFactory.PoolKeyStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OrderbookStream extends BaseContract {
  connect(runner?: ContractRunner | null): OrderbookStream;
  waitForDeployment(): Promise<this>;

  interface: OrderbookStreamInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  add: TypedContractMethod<
    [quote: OrderbookStream.QuoteStruct[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "add"
  ): TypedContractMethod<
    [quote: OrderbookStream.QuoteStruct[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "PublishQuote"
  ): TypedContractEvent<
    PublishQuoteEvent.InputTuple,
    PublishQuoteEvent.OutputTuple,
    PublishQuoteEvent.OutputObject
  >;

  filters: {
    "PublishQuote(tuple,address,address,uint256,uint256,bool,uint256,uint256,tuple,tuple)": TypedContractEvent<
      PublishQuoteEvent.InputTuple,
      PublishQuoteEvent.OutputTuple,
      PublishQuoteEvent.OutputObject
    >;
    PublishQuote: TypedContractEvent<
      PublishQuoteEvent.InputTuple,
      PublishQuoteEvent.OutputTuple,
      PublishQuoteEvent.OutputObject
    >;
  };
}
