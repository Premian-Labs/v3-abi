/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IReferralInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "claimRebate"
      | "getRebateAmounts"
      | "getRebatePercents()"
      | "getRebatePercents(address)"
      | "getRebateTier"
      | "getRebates"
      | "getReferrer"
      | "setPrimaryRebatePercent"
      | "setRebateTier"
      | "setSecondaryRebatePercent"
      | "useReferral"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimRebate"
      | "Refer"
      | "SetPrimaryRebatePercent"
      | "SetRebateTier"
      | "SetSecondaryRebatePercent"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "claimRebate",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebateAmounts",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebatePercents()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRebatePercents(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebateTier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRebates",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReferrer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setPrimaryRebatePercent",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebateTier",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecondaryRebatePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "useReferral",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "claimRebate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebateAmounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebatePercents()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebatePercents(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRebateTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRebates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReferrer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPrimaryRebatePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebateTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecondaryRebatePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useReferral",
    data: BytesLike
  ): Result;
}

export namespace ClaimRebateEvent {
  export type InputTuple = [
    referrer: AddressLike,
    token: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [referrer: string, token: string, amount: bigint];
  export interface OutputObject {
    referrer: string;
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferEvent {
  export type InputTuple = [
    user: AddressLike,
    primaryReferrer: AddressLike,
    secondaryReferrer: AddressLike,
    token: AddressLike,
    tier: BigNumberish,
    primaryRebate: BigNumberish,
    secondaryRebate: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    primaryReferrer: string,
    secondaryReferrer: string,
    token: string,
    tier: bigint,
    primaryRebate: bigint,
    secondaryRebate: bigint
  ];
  export interface OutputObject {
    user: string;
    primaryReferrer: string;
    secondaryReferrer: string;
    token: string;
    tier: bigint;
    primaryRebate: bigint;
    secondaryRebate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetPrimaryRebatePercentEvent {
  export type InputTuple = [
    tier: BigNumberish,
    oldPercent: BigNumberish,
    newPercent: BigNumberish
  ];
  export type OutputTuple = [
    tier: bigint,
    oldPercent: bigint,
    newPercent: bigint
  ];
  export interface OutputObject {
    tier: bigint;
    oldPercent: bigint;
    newPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetRebateTierEvent {
  export type InputTuple = [
    referrer: AddressLike,
    oldTier: BigNumberish,
    newTier: BigNumberish
  ];
  export type OutputTuple = [
    referrer: string,
    oldTier: bigint,
    newTier: bigint
  ];
  export interface OutputObject {
    referrer: string;
    oldTier: bigint;
    newTier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetSecondaryRebatePercentEvent {
  export type InputTuple = [oldPercent: BigNumberish, newPercent: BigNumberish];
  export type OutputTuple = [oldPercent: bigint, newPercent: bigint];
  export interface OutputObject {
    oldPercent: bigint;
    newPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IReferral extends BaseContract {
  connect(runner?: ContractRunner | null): IReferral;
  waitForDeployment(): Promise<this>;

  interface: IReferralInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  claimRebate: TypedContractMethod<
    [tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getRebateAmounts: TypedContractMethod<
    [user: AddressLike, referrer: AddressLike, tradingFee: BigNumberish],
    [[bigint, bigint] & { primaryRebate: bigint; secondaryRebate: bigint }],
    "view"
  >;

  "getRebatePercents()": TypedContractMethod<
    [],
    [
      [bigint[], bigint] & {
        primaryRebatePercents: bigint[];
        secondaryRebatePercent: bigint;
      }
    ],
    "view"
  >;

  "getRebatePercents(address)": TypedContractMethod<
    [referrer: AddressLike],
    [
      [bigint, bigint] & {
        primaryRebatePercent: bigint;
        secondaryRebatePercent: bigint;
      }
    ],
    "view"
  >;

  getRebateTier: TypedContractMethod<[referrer: AddressLike], [bigint], "view">;

  getRebates: TypedContractMethod<
    [referrer: AddressLike],
    [[string[], bigint[]] & { tokens: string[]; rebates: bigint[] }],
    "view"
  >;

  getReferrer: TypedContractMethod<[user: AddressLike], [string], "view">;

  setPrimaryRebatePercent: TypedContractMethod<
    [percent: BigNumberish, tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRebateTier: TypedContractMethod<
    [referrer: AddressLike, tier: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSecondaryRebatePercent: TypedContractMethod<
    [percent: BigNumberish],
    [void],
    "nonpayable"
  >;

  useReferral: TypedContractMethod<
    [
      user: AddressLike,
      referrer: AddressLike,
      token: AddressLike,
      primaryRebate: BigNumberish,
      secondaryRebate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "claimRebate"
  ): TypedContractMethod<[tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getRebateAmounts"
  ): TypedContractMethod<
    [user: AddressLike, referrer: AddressLike, tradingFee: BigNumberish],
    [[bigint, bigint] & { primaryRebate: bigint; secondaryRebate: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRebatePercents()"
  ): TypedContractMethod<
    [],
    [
      [bigint[], bigint] & {
        primaryRebatePercents: bigint[];
        secondaryRebatePercent: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRebatePercents(address)"
  ): TypedContractMethod<
    [referrer: AddressLike],
    [
      [bigint, bigint] & {
        primaryRebatePercent: bigint;
        secondaryRebatePercent: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRebateTier"
  ): TypedContractMethod<[referrer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRebates"
  ): TypedContractMethod<
    [referrer: AddressLike],
    [[string[], bigint[]] & { tokens: string[]; rebates: bigint[] }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReferrer"
  ): TypedContractMethod<[user: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setPrimaryRebatePercent"
  ): TypedContractMethod<
    [percent: BigNumberish, tier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRebateTier"
  ): TypedContractMethod<
    [referrer: AddressLike, tier: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSecondaryRebatePercent"
  ): TypedContractMethod<[percent: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "useReferral"
  ): TypedContractMethod<
    [
      user: AddressLike,
      referrer: AddressLike,
      token: AddressLike,
      primaryRebate: BigNumberish,
      secondaryRebate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClaimRebate"
  ): TypedContractEvent<
    ClaimRebateEvent.InputTuple,
    ClaimRebateEvent.OutputTuple,
    ClaimRebateEvent.OutputObject
  >;
  getEvent(
    key: "Refer"
  ): TypedContractEvent<
    ReferEvent.InputTuple,
    ReferEvent.OutputTuple,
    ReferEvent.OutputObject
  >;
  getEvent(
    key: "SetPrimaryRebatePercent"
  ): TypedContractEvent<
    SetPrimaryRebatePercentEvent.InputTuple,
    SetPrimaryRebatePercentEvent.OutputTuple,
    SetPrimaryRebatePercentEvent.OutputObject
  >;
  getEvent(
    key: "SetRebateTier"
  ): TypedContractEvent<
    SetRebateTierEvent.InputTuple,
    SetRebateTierEvent.OutputTuple,
    SetRebateTierEvent.OutputObject
  >;
  getEvent(
    key: "SetSecondaryRebatePercent"
  ): TypedContractEvent<
    SetSecondaryRebatePercentEvent.InputTuple,
    SetSecondaryRebatePercentEvent.OutputTuple,
    SetSecondaryRebatePercentEvent.OutputObject
  >;

  filters: {
    "ClaimRebate(address,address,uint256)": TypedContractEvent<
      ClaimRebateEvent.InputTuple,
      ClaimRebateEvent.OutputTuple,
      ClaimRebateEvent.OutputObject
    >;
    ClaimRebate: TypedContractEvent<
      ClaimRebateEvent.InputTuple,
      ClaimRebateEvent.OutputTuple,
      ClaimRebateEvent.OutputObject
    >;

    "Refer(address,address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      ReferEvent.InputTuple,
      ReferEvent.OutputTuple,
      ReferEvent.OutputObject
    >;
    Refer: TypedContractEvent<
      ReferEvent.InputTuple,
      ReferEvent.OutputTuple,
      ReferEvent.OutputObject
    >;

    "SetPrimaryRebatePercent(uint8,uint256,uint256)": TypedContractEvent<
      SetPrimaryRebatePercentEvent.InputTuple,
      SetPrimaryRebatePercentEvent.OutputTuple,
      SetPrimaryRebatePercentEvent.OutputObject
    >;
    SetPrimaryRebatePercent: TypedContractEvent<
      SetPrimaryRebatePercentEvent.InputTuple,
      SetPrimaryRebatePercentEvent.OutputTuple,
      SetPrimaryRebatePercentEvent.OutputObject
    >;

    "SetRebateTier(address,uint8,uint8)": TypedContractEvent<
      SetRebateTierEvent.InputTuple,
      SetRebateTierEvent.OutputTuple,
      SetRebateTierEvent.OutputObject
    >;
    SetRebateTier: TypedContractEvent<
      SetRebateTierEvent.InputTuple,
      SetRebateTierEvent.OutputTuple,
      SetRebateTierEvent.OutputObject
    >;

    "SetSecondaryRebatePercent(uint256,uint256)": TypedContractEvent<
      SetSecondaryRebatePercentEvent.InputTuple,
      SetSecondaryRebatePercentEvent.OutputTuple,
      SetSecondaryRebatePercentEvent.OutputObject
    >;
    SetSecondaryRebatePercent: TypedContractEvent<
      SetSecondaryRebatePercentEvent.InputTuple,
      SetSecondaryRebatePercentEvent.OutputTuple,
      SetSecondaryRebatePercentEvent.OutputObject
    >;
  };
}
