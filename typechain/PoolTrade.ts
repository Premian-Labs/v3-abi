/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Position {
  export type DeltaStruct = {
    collateral: BigNumberish;
    longs: BigNumberish;
    shorts: BigNumberish;
  };

  export type DeltaStructOutput = [
    collateral: bigint,
    longs: bigint,
    shorts: bigint
  ] & { collateral: bigint; longs: bigint; shorts: bigint };
}

export declare namespace IPoolInternal {
  export type QuoteOBStruct = {
    provider: AddressLike;
    taker: AddressLike;
    price: BigNumberish;
    size: BigNumberish;
    isBuy: boolean;
    deadline: BigNumberish;
    salt: BigNumberish;
  };

  export type QuoteOBStructOutput = [
    provider: string,
    taker: string,
    price: bigint,
    size: bigint,
    isBuy: boolean,
    deadline: bigint,
    salt: bigint
  ] & {
    provider: string;
    taker: string;
    price: bigint;
    size: bigint;
    isBuy: boolean;
    deadline: bigint;
    salt: bigint;
  };

  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };
}

export interface PoolTradeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelQuotesOB"
      | "fillQuoteOB"
      | "flashFee"
      | "flashLoan"
      | "getQuoteAMM"
      | "getQuoteOBFilledAmount"
      | "isQuoteOBValid"
      | "maxFlashLoan"
      | "trade"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Annihilate"
      | "ApprovalForAll"
      | "CancelQuoteOB"
      | "ClaimFees"
      | "ClaimProtocolFees"
      | "Deposit"
      | "Exercise"
      | "FillQuoteOB"
      | "FlashLoan"
      | "Settle"
      | "SettlePosition"
      | "Trade"
      | "TransferBatch"
      | "TransferPosition"
      | "TransferSingle"
      | "UpdateTick"
      | "Withdrawal"
      | "WriteFrom"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "cancelQuotesOB",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillQuoteOB",
    values: [
      IPoolInternal.QuoteOBStruct,
      BigNumberish,
      IPoolInternal.SignatureStruct,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAMM",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteOBFilledAmount",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuoteOBValid",
    values: [
      IPoolInternal.QuoteOBStruct,
      BigNumberish,
      IPoolInternal.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [BigNumberish, boolean, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelQuotesOB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillQuoteOB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteOBFilledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuoteOBValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
}

export namespace AnnihilateEvent {
  export type InputTuple = [
    owner: AddressLike,
    contractSize: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [owner: string, contractSize: bigint, fee: bigint];
  export interface OutputObject {
    owner: string;
    contractSize: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    account: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    account: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    account: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CancelQuoteOBEvent {
  export type InputTuple = [provider: AddressLike, quoteOBHash: BytesLike];
  export type OutputTuple = [provider: string, quoteOBHash: string];
  export interface OutputObject {
    provider: string;
    quoteOBHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimFeesEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    feesClaimed: BigNumberish,
    lastFeeRate: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    feesClaimed: bigint,
    lastFeeRate: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    feesClaimed: bigint;
    lastFeeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimProtocolFeesEvent {
  export type InputTuple = [
    feeReceiver: AddressLike,
    feesClaimed: BigNumberish
  ];
  export type OutputTuple = [feeReceiver: string, feesClaimed: bigint];
  export interface OutputObject {
    feeReceiver: string;
    feesClaimed: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    collateral: BigNumberish,
    longs: BigNumberish,
    shorts: BigNumberish,
    lastFeeRate: BigNumberish,
    claimableFees: BigNumberish,
    marketPrice: BigNumberish,
    liquidityRate: BigNumberish,
    currentTick: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    collateral: bigint,
    longs: bigint,
    shorts: bigint,
    lastFeeRate: bigint,
    claimableFees: bigint,
    marketPrice: bigint,
    liquidityRate: bigint,
    currentTick: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    collateral: bigint;
    longs: bigint;
    shorts: bigint;
    lastFeeRate: bigint;
    claimableFees: bigint;
    marketPrice: bigint;
    liquidityRate: bigint;
    currentTick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExerciseEvent {
  export type InputTuple = [
    operator: AddressLike,
    holder: AddressLike,
    contractSize: BigNumberish,
    exerciseValue: BigNumberish,
    settlementPrice: BigNumberish,
    fee: BigNumberish,
    operatorCost: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    holder: string,
    contractSize: bigint,
    exerciseValue: bigint,
    settlementPrice: bigint,
    fee: bigint,
    operatorCost: bigint
  ];
  export interface OutputObject {
    operator: string;
    holder: string;
    contractSize: bigint;
    exerciseValue: bigint;
    settlementPrice: bigint;
    fee: bigint;
    operatorCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FillQuoteOBEvent {
  export type InputTuple = [
    quoteOBHash: BytesLike,
    user: AddressLike,
    provider: AddressLike,
    contractSize: BigNumberish,
    deltaMaker: Position.DeltaStruct,
    deltaTaker: Position.DeltaStruct,
    premium: BigNumberish,
    protocolFee: BigNumberish,
    totalReferralRebate: BigNumberish,
    isBuy: boolean
  ];
  export type OutputTuple = [
    quoteOBHash: string,
    user: string,
    provider: string,
    contractSize: bigint,
    deltaMaker: Position.DeltaStructOutput,
    deltaTaker: Position.DeltaStructOutput,
    premium: bigint,
    protocolFee: bigint,
    totalReferralRebate: bigint,
    isBuy: boolean
  ];
  export interface OutputObject {
    quoteOBHash: string;
    user: string;
    provider: string;
    contractSize: bigint;
    deltaMaker: Position.DeltaStructOutput;
    deltaTaker: Position.DeltaStructOutput;
    premium: bigint;
    protocolFee: bigint;
    totalReferralRebate: bigint;
    isBuy: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FlashLoanEvent {
  export type InputTuple = [
    initiator: AddressLike,
    receiver: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    initiator: string,
    receiver: string,
    amount: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    initiator: string;
    receiver: string;
    amount: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettleEvent {
  export type InputTuple = [
    operator: AddressLike,
    holder: AddressLike,
    contractSize: BigNumberish,
    exerciseValue: BigNumberish,
    settlementPrice: BigNumberish,
    fee: BigNumberish,
    operatorCost: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    holder: string,
    contractSize: bigint,
    exerciseValue: bigint,
    settlementPrice: bigint,
    fee: bigint,
    operatorCost: bigint
  ];
  export interface OutputObject {
    operator: string;
    holder: string;
    contractSize: bigint;
    exerciseValue: bigint;
    settlementPrice: bigint;
    fee: bigint;
    operatorCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SettlePositionEvent {
  export type InputTuple = [
    operator: AddressLike,
    owner: AddressLike,
    tokenId: BigNumberish,
    contractSize: BigNumberish,
    collateral: BigNumberish,
    exerciseValue: BigNumberish,
    feesClaimed: BigNumberish,
    settlementPrice: BigNumberish,
    fee: BigNumberish,
    operatorCost: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    owner: string,
    tokenId: bigint,
    contractSize: bigint,
    collateral: bigint,
    exerciseValue: bigint,
    feesClaimed: bigint,
    settlementPrice: bigint,
    fee: bigint,
    operatorCost: bigint
  ];
  export interface OutputObject {
    operator: string;
    owner: string;
    tokenId: bigint;
    contractSize: bigint;
    collateral: bigint;
    exerciseValue: bigint;
    feesClaimed: bigint;
    settlementPrice: bigint;
    fee: bigint;
    operatorCost: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeEvent {
  export type InputTuple = [
    user: AddressLike,
    contractSize: BigNumberish,
    delta: Position.DeltaStruct,
    premium: BigNumberish,
    takerFee: BigNumberish,
    protocolFee: BigNumberish,
    marketPrice: BigNumberish,
    liquidityRate: BigNumberish,
    currentTick: BigNumberish,
    totalReferralRebate: BigNumberish,
    isBuy: boolean
  ];
  export type OutputTuple = [
    user: string,
    contractSize: bigint,
    delta: Position.DeltaStructOutput,
    premium: bigint,
    takerFee: bigint,
    protocolFee: bigint,
    marketPrice: bigint,
    liquidityRate: bigint,
    currentTick: bigint,
    totalReferralRebate: bigint,
    isBuy: boolean
  ];
  export interface OutputObject {
    user: string;
    contractSize: bigint;
    delta: Position.DeltaStructOutput;
    premium: bigint;
    takerFee: bigint;
    protocolFee: bigint;
    marketPrice: bigint;
    liquidityRate: bigint;
    currentTick: bigint;
    totalReferralRebate: bigint;
    isBuy: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferBatchEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    ids: BigNumberish[],
    values: BigNumberish[]
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    ids: bigint[],
    values: bigint[]
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    ids: bigint[];
    values: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferPositionEvent {
  export type InputTuple = [
    owner: AddressLike,
    receiver: AddressLike,
    srcTokenId: BigNumberish,
    destTokenId: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    receiver: string,
    srcTokenId: bigint,
    destTokenId: bigint
  ];
  export interface OutputObject {
    owner: string;
    receiver: string;
    srcTokenId: bigint;
    destTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferSingleEvent {
  export type InputTuple = [
    operator: AddressLike,
    from: AddressLike,
    to: AddressLike,
    id: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    from: string,
    to: string,
    id: bigint,
    value: bigint
  ];
  export interface OutputObject {
    operator: string;
    from: string;
    to: string;
    id: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateTickEvent {
  export type InputTuple = [
    tick: BigNumberish,
    prev: BigNumberish,
    next: BigNumberish,
    delta: BigNumberish,
    externalFeeRate: BigNumberish,
    longDelta: BigNumberish,
    shortDelta: BigNumberish,
    counter: BigNumberish
  ];
  export type OutputTuple = [
    tick: bigint,
    prev: bigint,
    next: bigint,
    delta: bigint,
    externalFeeRate: bigint,
    longDelta: bigint,
    shortDelta: bigint,
    counter: bigint
  ];
  export interface OutputObject {
    tick: bigint;
    prev: bigint;
    next: bigint;
    delta: bigint;
    externalFeeRate: bigint;
    longDelta: bigint;
    shortDelta: bigint;
    counter: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalEvent {
  export type InputTuple = [
    owner: AddressLike,
    tokenId: BigNumberish,
    collateral: BigNumberish,
    longs: BigNumberish,
    shorts: BigNumberish,
    lastFeeRate: BigNumberish,
    claimableFees: BigNumberish,
    marketPrice: BigNumberish,
    liquidityRate: BigNumberish,
    currentTick: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    tokenId: bigint,
    collateral: bigint,
    longs: bigint,
    shorts: bigint,
    lastFeeRate: bigint,
    claimableFees: bigint,
    marketPrice: bigint,
    liquidityRate: bigint,
    currentTick: bigint
  ];
  export interface OutputObject {
    owner: string;
    tokenId: bigint;
    collateral: bigint;
    longs: bigint;
    shorts: bigint;
    lastFeeRate: bigint;
    claimableFees: bigint;
    marketPrice: bigint;
    liquidityRate: bigint;
    currentTick: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WriteFromEvent {
  export type InputTuple = [
    underwriter: AddressLike,
    longReceiver: AddressLike,
    taker: AddressLike,
    contractSize: BigNumberish,
    collateral: BigNumberish,
    protocolFee: BigNumberish
  ];
  export type OutputTuple = [
    underwriter: string,
    longReceiver: string,
    taker: string,
    contractSize: bigint,
    collateral: bigint,
    protocolFee: bigint
  ];
  export interface OutputObject {
    underwriter: string;
    longReceiver: string;
    taker: string;
    contractSize: bigint;
    collateral: bigint;
    protocolFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolTrade extends BaseContract {
  connect(runner?: ContractRunner | null): PoolTrade;
  waitForDeployment(): Promise<this>;

  interface: PoolTradeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelQuotesOB: TypedContractMethod<
    [hashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  fillQuoteOB: TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      signature: IPoolInternal.SignatureStruct,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        premiumTaker: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;

  flashFee: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  flashLoan: TypedContractMethod<
    [
      receiver: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  getQuoteAMM: TypedContractMethod<
    [taker: AddressLike, size: BigNumberish, isBuy: boolean],
    [[bigint, bigint] & { premiumNet: bigint; takerFee: bigint }],
    "view"
  >;

  getQuoteOBFilledAmount: TypedContractMethod<
    [provider: AddressLike, quoteOBHash: BytesLike],
    [bigint],
    "view"
  >;

  isQuoteOBValid: TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      sig: IPoolInternal.SignatureStruct
    ],
    [[boolean, bigint]],
    "view"
  >;

  maxFlashLoan: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  trade: TypedContractMethod<
    [
      size: BigNumberish,
      isBuy: boolean,
      premiumLimit: BigNumberish,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        totalPremium: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelQuotesOB"
  ): TypedContractMethod<[hashes: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fillQuoteOB"
  ): TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      signature: IPoolInternal.SignatureStruct,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        premiumTaker: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashFee"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getQuoteAMM"
  ): TypedContractMethod<
    [taker: AddressLike, size: BigNumberish, isBuy: boolean],
    [[bigint, bigint] & { premiumNet: bigint; takerFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuoteOBFilledAmount"
  ): TypedContractMethod<
    [provider: AddressLike, quoteOBHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isQuoteOBValid"
  ): TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      sig: IPoolInternal.SignatureStruct
    ],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxFlashLoan"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "trade"
  ): TypedContractMethod<
    [
      size: BigNumberish,
      isBuy: boolean,
      premiumLimit: BigNumberish,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        totalPremium: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;

  getEvent(
    key: "Annihilate"
  ): TypedContractEvent<
    AnnihilateEvent.InputTuple,
    AnnihilateEvent.OutputTuple,
    AnnihilateEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "CancelQuoteOB"
  ): TypedContractEvent<
    CancelQuoteOBEvent.InputTuple,
    CancelQuoteOBEvent.OutputTuple,
    CancelQuoteOBEvent.OutputObject
  >;
  getEvent(
    key: "ClaimFees"
  ): TypedContractEvent<
    ClaimFeesEvent.InputTuple,
    ClaimFeesEvent.OutputTuple,
    ClaimFeesEvent.OutputObject
  >;
  getEvent(
    key: "ClaimProtocolFees"
  ): TypedContractEvent<
    ClaimProtocolFeesEvent.InputTuple,
    ClaimProtocolFeesEvent.OutputTuple,
    ClaimProtocolFeesEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Exercise"
  ): TypedContractEvent<
    ExerciseEvent.InputTuple,
    ExerciseEvent.OutputTuple,
    ExerciseEvent.OutputObject
  >;
  getEvent(
    key: "FillQuoteOB"
  ): TypedContractEvent<
    FillQuoteOBEvent.InputTuple,
    FillQuoteOBEvent.OutputTuple,
    FillQuoteOBEvent.OutputObject
  >;
  getEvent(
    key: "FlashLoan"
  ): TypedContractEvent<
    FlashLoanEvent.InputTuple,
    FlashLoanEvent.OutputTuple,
    FlashLoanEvent.OutputObject
  >;
  getEvent(
    key: "Settle"
  ): TypedContractEvent<
    SettleEvent.InputTuple,
    SettleEvent.OutputTuple,
    SettleEvent.OutputObject
  >;
  getEvent(
    key: "SettlePosition"
  ): TypedContractEvent<
    SettlePositionEvent.InputTuple,
    SettlePositionEvent.OutputTuple,
    SettlePositionEvent.OutputObject
  >;
  getEvent(
    key: "Trade"
  ): TypedContractEvent<
    TradeEvent.InputTuple,
    TradeEvent.OutputTuple,
    TradeEvent.OutputObject
  >;
  getEvent(
    key: "TransferBatch"
  ): TypedContractEvent<
    TransferBatchEvent.InputTuple,
    TransferBatchEvent.OutputTuple,
    TransferBatchEvent.OutputObject
  >;
  getEvent(
    key: "TransferPosition"
  ): TypedContractEvent<
    TransferPositionEvent.InputTuple,
    TransferPositionEvent.OutputTuple,
    TransferPositionEvent.OutputObject
  >;
  getEvent(
    key: "TransferSingle"
  ): TypedContractEvent<
    TransferSingleEvent.InputTuple,
    TransferSingleEvent.OutputTuple,
    TransferSingleEvent.OutputObject
  >;
  getEvent(
    key: "UpdateTick"
  ): TypedContractEvent<
    UpdateTickEvent.InputTuple,
    UpdateTickEvent.OutputTuple,
    UpdateTickEvent.OutputObject
  >;
  getEvent(
    key: "Withdrawal"
  ): TypedContractEvent<
    WithdrawalEvent.InputTuple,
    WithdrawalEvent.OutputTuple,
    WithdrawalEvent.OutputObject
  >;
  getEvent(
    key: "WriteFrom"
  ): TypedContractEvent<
    WriteFromEvent.InputTuple,
    WriteFromEvent.OutputTuple,
    WriteFromEvent.OutputObject
  >;

  filters: {
    "Annihilate(address,uint256,uint256)": TypedContractEvent<
      AnnihilateEvent.InputTuple,
      AnnihilateEvent.OutputTuple,
      AnnihilateEvent.OutputObject
    >;
    Annihilate: TypedContractEvent<
      AnnihilateEvent.InputTuple,
      AnnihilateEvent.OutputTuple,
      AnnihilateEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "CancelQuoteOB(address,bytes32)": TypedContractEvent<
      CancelQuoteOBEvent.InputTuple,
      CancelQuoteOBEvent.OutputTuple,
      CancelQuoteOBEvent.OutputObject
    >;
    CancelQuoteOB: TypedContractEvent<
      CancelQuoteOBEvent.InputTuple,
      CancelQuoteOBEvent.OutputTuple,
      CancelQuoteOBEvent.OutputObject
    >;

    "ClaimFees(address,uint256,uint256,int256)": TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;
    ClaimFees: TypedContractEvent<
      ClaimFeesEvent.InputTuple,
      ClaimFeesEvent.OutputTuple,
      ClaimFeesEvent.OutputObject
    >;

    "ClaimProtocolFees(address,uint256)": TypedContractEvent<
      ClaimProtocolFeesEvent.InputTuple,
      ClaimProtocolFeesEvent.OutputTuple,
      ClaimProtocolFeesEvent.OutputObject
    >;
    ClaimProtocolFees: TypedContractEvent<
      ClaimProtocolFeesEvent.InputTuple,
      ClaimProtocolFeesEvent.OutputTuple,
      ClaimProtocolFeesEvent.OutputObject
    >;

    "Deposit(address,uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Exercise(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      ExerciseEvent.InputTuple,
      ExerciseEvent.OutputTuple,
      ExerciseEvent.OutputObject
    >;
    Exercise: TypedContractEvent<
      ExerciseEvent.InputTuple,
      ExerciseEvent.OutputTuple,
      ExerciseEvent.OutputObject
    >;

    "FillQuoteOB(bytes32,address,address,uint256,tuple,tuple,uint256,uint256,uint256,bool)": TypedContractEvent<
      FillQuoteOBEvent.InputTuple,
      FillQuoteOBEvent.OutputTuple,
      FillQuoteOBEvent.OutputObject
    >;
    FillQuoteOB: TypedContractEvent<
      FillQuoteOBEvent.InputTuple,
      FillQuoteOBEvent.OutputTuple,
      FillQuoteOBEvent.OutputObject
    >;

    "FlashLoan(address,address,uint256,uint256)": TypedContractEvent<
      FlashLoanEvent.InputTuple,
      FlashLoanEvent.OutputTuple,
      FlashLoanEvent.OutputObject
    >;
    FlashLoan: TypedContractEvent<
      FlashLoanEvent.InputTuple,
      FlashLoanEvent.OutputTuple,
      FlashLoanEvent.OutputObject
    >;

    "Settle(address,address,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SettleEvent.InputTuple,
      SettleEvent.OutputTuple,
      SettleEvent.OutputObject
    >;
    Settle: TypedContractEvent<
      SettleEvent.InputTuple,
      SettleEvent.OutputTuple,
      SettleEvent.OutputObject
    >;

    "SettlePosition(address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      SettlePositionEvent.InputTuple,
      SettlePositionEvent.OutputTuple,
      SettlePositionEvent.OutputObject
    >;
    SettlePosition: TypedContractEvent<
      SettlePositionEvent.InputTuple,
      SettlePositionEvent.OutputTuple,
      SettlePositionEvent.OutputObject
    >;

    "Trade(address,uint256,tuple,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;
    Trade: TypedContractEvent<
      TradeEvent.InputTuple,
      TradeEvent.OutputTuple,
      TradeEvent.OutputObject
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])": TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;
    TransferBatch: TypedContractEvent<
      TransferBatchEvent.InputTuple,
      TransferBatchEvent.OutputTuple,
      TransferBatchEvent.OutputObject
    >;

    "TransferPosition(address,address,uint256,uint256)": TypedContractEvent<
      TransferPositionEvent.InputTuple,
      TransferPositionEvent.OutputTuple,
      TransferPositionEvent.OutputObject
    >;
    TransferPosition: TypedContractEvent<
      TransferPositionEvent.InputTuple,
      TransferPositionEvent.OutputTuple,
      TransferPositionEvent.OutputObject
    >;

    "TransferSingle(address,address,address,uint256,uint256)": TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;
    TransferSingle: TypedContractEvent<
      TransferSingleEvent.InputTuple,
      TransferSingleEvent.OutputTuple,
      TransferSingleEvent.OutputObject
    >;

    "UpdateTick(uint256,uint256,uint256,int256,uint256,int256,int256,uint256)": TypedContractEvent<
      UpdateTickEvent.InputTuple,
      UpdateTickEvent.OutputTuple,
      UpdateTickEvent.OutputObject
    >;
    UpdateTick: TypedContractEvent<
      UpdateTickEvent.InputTuple,
      UpdateTickEvent.OutputTuple,
      UpdateTickEvent.OutputObject
    >;

    "Withdrawal(address,uint256,uint256,uint256,uint256,int256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;
    Withdrawal: TypedContractEvent<
      WithdrawalEvent.InputTuple,
      WithdrawalEvent.OutputTuple,
      WithdrawalEvent.OutputObject
    >;

    "WriteFrom(address,address,address,uint256,uint256,uint256)": TypedContractEvent<
      WriteFromEvent.InputTuple,
      WriteFromEvent.OutputTuple,
      WriteFromEvent.OutputObject
    >;
    WriteFrom: TypedContractEvent<
      WriteFromEvent.InputTuple,
      WriteFromEvent.OutputTuple,
      WriteFromEvent.OutputObject
    >;
  };
}
