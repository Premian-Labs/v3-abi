/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IChainlinkAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "describePricingPath"
      | "getPrice"
      | "getPriceAt"
      | "isPairSupported"
      | "pricingPath"
      | "upsertPair"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "UpdatedPathForPair"): EventFragment;

  encodeFunctionData(
    functionFragment: "describePricingPath",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAt",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPairSupported",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pricingPath",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upsertPair",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "describePricingPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPairSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pricingPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upsertPair", data: BytesLike): Result;
}

export namespace UpdatedPathForPairEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    path: BigNumberish
  ];
  export type OutputTuple = [tokenA: string, tokenB: string, path: bigint];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    path: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IChainlinkAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): IChainlinkAdapter;
  waitForDeployment(): Promise<this>;

  interface: IChainlinkAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  describePricingPath: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string[][], bigint[]] & {
        adapterType: bigint;
        path: string[][];
        decimals: bigint[];
      }
    ],
    "view"
  >;

  getPrice: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike],
    [bigint],
    "view"
  >;

  getPriceAt: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, target: BigNumberish],
    [bigint],
    "view"
  >;

  isPairSupported: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[boolean, boolean] & { isCached: boolean; hasPath: boolean }],
    "view"
  >;

  pricingPath: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [bigint],
    "view"
  >;

  upsertPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "describePricingPath"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string[][], bigint[]] & {
        adapterType: bigint;
        path: string[][];
        decimals: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceAt"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, target: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isPairSupported"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[boolean, boolean] & { isCached: boolean; hasPath: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "pricingPath"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "upsertPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "UpdatedPathForPair"
  ): TypedContractEvent<
    UpdatedPathForPairEvent.InputTuple,
    UpdatedPathForPairEvent.OutputTuple,
    UpdatedPathForPairEvent.OutputObject
  >;

  filters: {
    "UpdatedPathForPair(address,address,uint8)": TypedContractEvent<
      UpdatedPathForPairEvent.InputTuple,
      UpdatedPathForPairEvent.OutputTuple,
      UpdatedPathForPairEvent.OutputObject
    >;
    UpdatedPathForPair: TypedContractEvent<
      UpdatedPathForPairEvent.InputTuple,
      UpdatedPathForPairEvent.OutputTuple,
      UpdatedPathForPairEvent.OutputObject
    >;
  };
}
