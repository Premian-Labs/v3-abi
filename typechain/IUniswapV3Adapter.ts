/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface IUniswapV3AdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "describePricingPath"
      | "getCardinalityPerMinute"
      | "getFactory"
      | "getGasPerCardinality"
      | "getGasToSupportPool"
      | "getPeriod"
      | "getPrice"
      | "getPriceAt"
      | "getSupportedFeeTiers"
      | "getTargetCardinality"
      | "insertFeeTier"
      | "isPairSupported"
      | "poolsForPair"
      | "setCardinalityPerMinute"
      | "setPeriod"
      | "upsertPair"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "UpdatedCardinalityPerMinute"
      | "UpdatedPeriod"
      | "UpdatedPoolsForPair"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "describePricingPath",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCardinalityPerMinute",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasPerCardinality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGasToSupportPool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getPeriod", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceAt",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSupportedFeeTiers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTargetCardinality",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insertFeeTier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isPairSupported",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolsForPair",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCardinalityPerMinute",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upsertPair",
    values: [AddressLike, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "describePricingPath",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCardinalityPerMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGasPerCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGasToSupportPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPriceAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedFeeTiers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTargetCardinality",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insertFeeTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPairSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "poolsForPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCardinalityPerMinute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPeriod", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upsertPair", data: BytesLike): Result;
}

export namespace UpdatedCardinalityPerMinuteEvent {
  export type InputTuple = [cardinalityPerMinute: BigNumberish];
  export type OutputTuple = [cardinalityPerMinute: bigint];
  export interface OutputObject {
    cardinalityPerMinute: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedPeriodEvent {
  export type InputTuple = [period: BigNumberish];
  export type OutputTuple = [period: bigint];
  export interface OutputObject {
    period: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdatedPoolsForPairEvent {
  export type InputTuple = [
    tokenA: AddressLike,
    tokenB: AddressLike,
    pools: AddressLike[]
  ];
  export type OutputTuple = [tokenA: string, tokenB: string, pools: string[]];
  export interface OutputObject {
    tokenA: string;
    tokenB: string;
    pools: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IUniswapV3Adapter extends BaseContract {
  connect(runner?: ContractRunner | null): IUniswapV3Adapter;
  waitForDeployment(): Promise<this>;

  interface: IUniswapV3AdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  describePricingPath: TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string[][], bigint[]] & {
        adapterType: bigint;
        path: string[][];
        decimals: bigint[];
      }
    ],
    "view"
  >;

  getCardinalityPerMinute: TypedContractMethod<[], [bigint], "view">;

  getFactory: TypedContractMethod<[], [string], "view">;

  getGasPerCardinality: TypedContractMethod<[], [bigint], "view">;

  getGasToSupportPool: TypedContractMethod<[], [bigint], "view">;

  getPeriod: TypedContractMethod<[], [bigint], "view">;

  getPrice: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike],
    [bigint],
    "view"
  >;

  getPriceAt: TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, target: BigNumberish],
    [bigint],
    "view"
  >;

  getSupportedFeeTiers: TypedContractMethod<[], [bigint[]], "view">;

  getTargetCardinality: TypedContractMethod<[], [bigint], "view">;

  insertFeeTier: TypedContractMethod<
    [feeTier: BigNumberish],
    [void],
    "nonpayable"
  >;

  isPairSupported: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[boolean, boolean] & { isCached: boolean; hasPath: boolean }],
    "view"
  >;

  poolsForPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string[]],
    "view"
  >;

  setCardinalityPerMinute: TypedContractMethod<
    [newCardinalityPerMinute: BigNumberish],
    [void],
    "nonpayable"
  >;

  setPeriod: TypedContractMethod<
    [newPeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  upsertPair: TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "describePricingPath"
  ): TypedContractMethod<
    [token: AddressLike],
    [
      [bigint, string[][], bigint[]] & {
        adapterType: bigint;
        path: string[][];
        decimals: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCardinalityPerMinute"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGasPerCardinality"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGasToSupportPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPriceAt"
  ): TypedContractMethod<
    [tokenIn: AddressLike, tokenOut: AddressLike, target: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedFeeTiers"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getTargetCardinality"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "insertFeeTier"
  ): TypedContractMethod<[feeTier: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isPairSupported"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [[boolean, boolean] & { isCached: boolean; hasPath: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolsForPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "setCardinalityPerMinute"
  ): TypedContractMethod<
    [newCardinalityPerMinute: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setPeriod"
  ): TypedContractMethod<[newPeriod: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upsertPair"
  ): TypedContractMethod<
    [tokenA: AddressLike, tokenB: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "UpdatedCardinalityPerMinute"
  ): TypedContractEvent<
    UpdatedCardinalityPerMinuteEvent.InputTuple,
    UpdatedCardinalityPerMinuteEvent.OutputTuple,
    UpdatedCardinalityPerMinuteEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedPeriod"
  ): TypedContractEvent<
    UpdatedPeriodEvent.InputTuple,
    UpdatedPeriodEvent.OutputTuple,
    UpdatedPeriodEvent.OutputObject
  >;
  getEvent(
    key: "UpdatedPoolsForPair"
  ): TypedContractEvent<
    UpdatedPoolsForPairEvent.InputTuple,
    UpdatedPoolsForPairEvent.OutputTuple,
    UpdatedPoolsForPairEvent.OutputObject
  >;

  filters: {
    "UpdatedCardinalityPerMinute(uint256)": TypedContractEvent<
      UpdatedCardinalityPerMinuteEvent.InputTuple,
      UpdatedCardinalityPerMinuteEvent.OutputTuple,
      UpdatedCardinalityPerMinuteEvent.OutputObject
    >;
    UpdatedCardinalityPerMinute: TypedContractEvent<
      UpdatedCardinalityPerMinuteEvent.InputTuple,
      UpdatedCardinalityPerMinuteEvent.OutputTuple,
      UpdatedCardinalityPerMinuteEvent.OutputObject
    >;

    "UpdatedPeriod(uint256)": TypedContractEvent<
      UpdatedPeriodEvent.InputTuple,
      UpdatedPeriodEvent.OutputTuple,
      UpdatedPeriodEvent.OutputObject
    >;
    UpdatedPeriod: TypedContractEvent<
      UpdatedPeriodEvent.InputTuple,
      UpdatedPeriodEvent.OutputTuple,
      UpdatedPeriodEvent.OutputObject
    >;

    "UpdatedPoolsForPair(address,address,address[])": TypedContractEvent<
      UpdatedPoolsForPairEvent.InputTuple,
      UpdatedPoolsForPairEvent.OutputTuple,
      UpdatedPoolsForPairEvent.OutputObject
    >;
    UpdatedPoolsForPair: TypedContractEvent<
      UpdatedPoolsForPairEvent.InputTuple,
      UpdatedPoolsForPairEvent.OutputTuple,
      UpdatedPoolsForPairEvent.OutputObject
    >;
  };
}
