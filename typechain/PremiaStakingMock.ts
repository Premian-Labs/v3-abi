/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPremiaStaking {
  export type StakeLevelStruct = {
    amount: BigNumberish;
    discount: BigNumberish;
  };

  export type StakeLevelStructOutput = [amount: bigint, discount: bigint] & {
    amount: bigint;
    discount: bigint;
  };

  export type SwapArgsStruct = {
    amountOutMin: BigNumberish;
    callee: AddressLike;
    allowanceTarget: AddressLike;
    data: BytesLike;
    refundAddress: AddressLike;
  };

  export type SwapArgsStructOutput = [
    amountOutMin: bigint,
    callee: string,
    allowanceTarget: string,
    data: string,
    refundAddress: string
  ] & {
    amountOutMin: bigint;
    callee: string;
    allowanceTarget: string;
    data: string;
    refundAddress: string;
  };
}

export declare namespace PremiaStakingStorage {
  export type UserInfoStruct = {
    reward: BigNumberish;
    rewardDebt: BigNumberish;
    unstakeRewardDebt: BigNumberish;
    stakePeriod: BigNumberish;
    lockedUntil: BigNumberish;
  };

  export type UserInfoStructOutput = [
    reward: bigint,
    rewardDebt: bigint,
    unstakeRewardDebt: bigint,
    stakePeriod: bigint,
    lockedUntil: bigint
  ] & {
    reward: bigint;
    rewardDebt: bigint;
    unstakeRewardDebt: bigint;
    stakePeriod: bigint;
    lockedUntil: bigint;
  };
}

export interface PremiaStakingMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DOMAIN_SEPARATOR"
      | "PT_SEND"
      | "addRewards"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "circulatingSupply"
      | "creditTo"
      | "decay"
      | "decimals"
      | "decreaseAllowance"
      | "earlyUnstake"
      | "estimateSendFee"
      | "failedMessages"
      | "forceResumeReceive"
      | "getAvailablePremiaAmount"
      | "getAvailableRewards"
      | "getConfig"
      | "getDiscount"
      | "getDiscountBPS"
      | "getEarlyUnstakeFee"
      | "getEarlyUnstakeFeeBPS"
      | "getPendingRewards"
      | "getPendingUserRewards"
      | "getPendingWithdrawal"
      | "getPendingWithdrawals"
      | "getRewardToken"
      | "getStakeLevels"
      | "getStakePeriodMultiplier"
      | "getStakePeriodMultiplierBPS"
      | "getTotalPower"
      | "getTrustedRemoteAddress"
      | "getUserInfo"
      | "getUserPower"
      | "harvest"
      | "harvestAndStake"
      | "increaseAllowance"
      | "isTrustedRemote"
      | "lzEndpoint"
      | "lzReceive"
      | "name"
      | "nonblockingLzReceive"
      | "nonces"
      | "permit"
      | "retryMessage"
      | "sendFrom"
      | "setConfig"
      | "setReceiveVersion"
      | "setSendVersion"
      | "setTrustedRemoteAddress"
      | "stake"
      | "stakeWithPermit"
      | "startWithdraw"
      | "supportsInterface"
      | "symbol"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "updateLock"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "BridgeLock"
      | "EarlyUnstakeRewardCollected"
      | "Harvest"
      | "MessageFailed"
      | "OwnershipTransferred"
      | "ReceiveFromChain"
      | "RetryMessageSuccess"
      | "RewardsAdded"
      | "SendToChain"
      | "SetTrustedRemoteAddress"
      | "SetUseCustomAdapterParams"
      | "Stake"
      | "Transfer"
      | "Unstake"
      | "UpdateLock"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PT_SEND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "circulatingSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "creditTo",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "decay",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "earlyUnstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [BigNumberish, BytesLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "failedMessages",
    values: [BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceResumeReceive",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailablePremiaAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getConfig",
    values: [BigNumberish, BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiscount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDiscountBPS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlyUnstakeFee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEarlyUnstakeFeeBPS",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingUserRewards",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdrawal",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingWithdrawals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakeLevels",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePeriodMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakePeriodMultiplierBPS",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalPower",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRemoteAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestAndStake",
    values: [IPremiaStaking.SwapArgsStruct, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lzEndpoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonblockingLzReceive",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retryMessage",
    values: [BigNumberish, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendFrom",
    values: [
      AddressLike,
      BigNumberish,
      BytesLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setReceiveVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSendVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemoteAddress",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeWithPermit",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "startWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PT_SEND", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addRewards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circulatingSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creditTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "earlyUnstake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "failedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceResumeReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailablePremiaAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiscountBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarlyUnstakeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEarlyUnstakeFeeBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingUserRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakeLevels",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePeriodMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakePeriodMultiplierBPS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestAndStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lzEndpoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lzReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonblockingLzReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retryMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendFrom", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReceiveVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSendVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemoteAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "startWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateLock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgeLockEvent {
  export type InputTuple = [
    user: AddressLike,
    stakePeriod: BigNumberish,
    lockedUntil: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    stakePeriod: bigint,
    lockedUntil: bigint
  ];
  export interface OutputObject {
    user: string;
    stakePeriod: bigint;
    lockedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EarlyUnstakeRewardCollectedEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HarvestEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageFailedEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    payload: BytesLike,
    reason: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    payload: string,
    reason: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    payload: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReceiveFromChainEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    toAddress: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    toAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    toAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RetryMessageSuccessEvent {
  export type InputTuple = [
    srcChainId: BigNumberish,
    srcAddress: BytesLike,
    nonce: BigNumberish,
    payloadHash: BytesLike
  ];
  export type OutputTuple = [
    srcChainId: bigint,
    srcAddress: string,
    nonce: bigint,
    payloadHash: string
  ];
  export interface OutputObject {
    srcChainId: bigint;
    srcAddress: string;
    nonce: bigint;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsAddedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SendToChainEvent {
  export type InputTuple = [
    sender: AddressLike,
    dstChainId: BigNumberish,
    toAddress: BytesLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    dstChainId: bigint,
    toAddress: string,
    amount: bigint
  ];
  export interface OutputObject {
    sender: string;
    dstChainId: bigint;
    toAddress: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetTrustedRemoteAddressEvent {
  export type InputTuple = [
    _remoteChainId: BigNumberish,
    _remoteAddress: BytesLike
  ];
  export type OutputTuple = [_remoteChainId: bigint, _remoteAddress: string];
  export interface OutputObject {
    _remoteChainId: bigint;
    _remoteAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetUseCustomAdapterParamsEvent {
  export type InputTuple = [_useCustomAdapterParams: boolean];
  export type OutputTuple = [_useCustomAdapterParams: boolean];
  export interface OutputObject {
    _useCustomAdapterParams: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    stakePeriod: BigNumberish,
    lockedUntil: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    stakePeriod: bigint,
    lockedUntil: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    stakePeriod: bigint;
    lockedUntil: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakeEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    fee: BigNumberish,
    startDate: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    fee: bigint,
    startDate: bigint
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    fee: bigint;
    startDate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateLockEvent {
  export type InputTuple = [
    user: AddressLike,
    oldStakePeriod: BigNumberish,
    newStakePeriod: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    oldStakePeriod: bigint,
    newStakePeriod: bigint
  ];
  export interface OutputObject {
    user: string;
    oldStakePeriod: bigint;
    newStakePeriod: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [user: AddressLike, amount: BigNumberish];
  export type OutputTuple = [user: string, amount: bigint];
  export interface OutputObject {
    user: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PremiaStakingMock extends BaseContract {
  connect(runner?: ContractRunner | null): PremiaStakingMock;
  waitForDeployment(): Promise<this>;

  interface: PremiaStakingMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DOMAIN_SEPARATOR: TypedContractMethod<[], [string], "view">;

  PT_SEND: TypedContractMethod<[], [bigint], "view">;

  addRewards: TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  circulatingSupply: TypedContractMethod<[], [bigint], "view">;

  creditTo: TypedContractMethod<
    [
      toAddress: AddressLike,
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      lockedUntil: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  decay: TypedContractMethod<
    [
      pendingRewards: BigNumberish,
      oldTimestamp: BigNumberish,
      newTimestamp: BigNumberish
    ],
    [bigint],
    "view"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  decreaseAllowance: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  earlyUnstake: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  estimateSendFee: TypedContractMethod<
    [
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      useZro: boolean,
      adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  failedMessages: TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike, nonce: BigNumberish],
    [string],
    "view"
  >;

  forceResumeReceive: TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  getAvailablePremiaAmount: TypedContractMethod<[], [bigint], "view">;

  getAvailableRewards: TypedContractMethod<
    [],
    [[bigint, bigint] & { rewards: bigint; unstakeRewards: bigint }],
    "view"
  >;

  getConfig: TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      arg2: AddressLike,
      configType: BigNumberish
    ],
    [string],
    "view"
  >;

  getDiscount: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getDiscountBPS: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getEarlyUnstakeFee: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getEarlyUnstakeFeeBPS: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getPendingRewards: TypedContractMethod<[], [bigint], "view">;

  getPendingUserRewards: TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { reward: bigint; unstakeReward: bigint }],
    "view"
  >;

  getPendingWithdrawal: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        startDate: bigint;
        unlockDate: bigint;
      }
    ],
    "view"
  >;

  getPendingWithdrawals: TypedContractMethod<[], [bigint], "view">;

  getRewardToken: TypedContractMethod<[], [string], "view">;

  getStakeLevels: TypedContractMethod<
    [],
    [IPremiaStaking.StakeLevelStructOutput[]],
    "view"
  >;

  getStakePeriodMultiplier: TypedContractMethod<
    [period: BigNumberish],
    [bigint],
    "view"
  >;

  getStakePeriodMultiplierBPS: TypedContractMethod<
    [period: BigNumberish],
    [bigint],
    "view"
  >;

  getTotalPower: TypedContractMethod<[], [bigint], "view">;

  getTrustedRemoteAddress: TypedContractMethod<
    [_remoteChainId: BigNumberish],
    [string],
    "view"
  >;

  getUserInfo: TypedContractMethod<
    [user: AddressLike],
    [PremiaStakingStorage.UserInfoStructOutput],
    "view"
  >;

  getUserPower: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  harvest: TypedContractMethod<[], [void], "nonpayable">;

  harvestAndStake: TypedContractMethod<
    [s: IPremiaStaking.SwapArgsStruct, stakePeriod: BigNumberish],
    [void],
    "nonpayable"
  >;

  increaseAllowance: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  isTrustedRemote: TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [boolean],
    "view"
  >;

  lzEndpoint: TypedContractMethod<[], [string], "view">;

  lzReceive: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonblockingLzReceive: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  nonces: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  permit: TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  retryMessage: TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "payable"
  >;

  sendFrom: TypedContractMethod<
    [
      from: AddressLike,
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      refundAddress: AddressLike,
      zroPaymentAddress: AddressLike,
      adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;

  setConfig: TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      configType: BigNumberish,
      config: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setReceiveVersion: TypedContractMethod<
    [version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSendVersion: TypedContractMethod<
    [version: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTrustedRemoteAddress: TypedContractMethod<
    [remoteChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [amount: BigNumberish, period: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeWithPermit: TypedContractMethod<
    [
      amount: BigNumberish,
      period: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  startWithdraw: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  updateLock: TypedContractMethod<[period: BigNumberish], [void], "nonpayable">;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DOMAIN_SEPARATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PT_SEND"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addRewards"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [holder: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "circulatingSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "creditTo"
  ): TypedContractMethod<
    [
      toAddress: AddressLike,
      amount: BigNumberish,
      stakePeriod: BigNumberish,
      lockedUntil: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decay"
  ): TypedContractMethod<
    [
      pendingRewards: BigNumberish,
      oldTimestamp: BigNumberish,
      newTimestamp: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decreaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "earlyUnstake"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "estimateSendFee"
  ): TypedContractMethod<
    [
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      useZro: boolean,
      adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "failedMessages"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike, nonce: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "forceResumeReceive"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAvailablePremiaAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAvailableRewards"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { rewards: bigint; unstakeRewards: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getConfig"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      arg2: AddressLike,
      configType: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDiscount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDiscountBPS"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEarlyUnstakeFee"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEarlyUnstakeFeeBPS"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPendingUserRewards"
  ): TypedContractMethod<
    [user: AddressLike],
    [[bigint, bigint] & { reward: bigint; unstakeReward: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingWithdrawal"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint, bigint, bigint] & {
        amount: bigint;
        startDate: bigint;
        unlockDate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPendingWithdrawals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getStakeLevels"
  ): TypedContractMethod<[], [IPremiaStaking.StakeLevelStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getStakePeriodMultiplier"
  ): TypedContractMethod<[period: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakePeriodMultiplierBPS"
  ): TypedContractMethod<[period: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalPower"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTrustedRemoteAddress"
  ): TypedContractMethod<[_remoteChainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUserInfo"
  ): TypedContractMethod<
    [user: AddressLike],
    [PremiaStakingStorage.UserInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getUserPower"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "harvest"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "harvestAndStake"
  ): TypedContractMethod<
    [s: IPremiaStaking.SwapArgsStruct, stakePeriod: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "increaseAllowance"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isTrustedRemote"
  ): TypedContractMethod<
    [srcChainId: BigNumberish, srcAddress: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "lzEndpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "lzReceive"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonblockingLzReceive"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "permit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      spender: AddressLike,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "retryMessage"
  ): TypedContractMethod<
    [
      srcChainId: BigNumberish,
      srcAddress: BytesLike,
      nonce: BigNumberish,
      payload: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sendFrom"
  ): TypedContractMethod<
    [
      from: AddressLike,
      dstChainId: BigNumberish,
      toAddress: BytesLike,
      amount: BigNumberish,
      refundAddress: AddressLike,
      zroPaymentAddress: AddressLike,
      adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [
      version: BigNumberish,
      chainId: BigNumberish,
      configType: BigNumberish,
      config: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setReceiveVersion"
  ): TypedContractMethod<[version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setSendVersion"
  ): TypedContractMethod<[version: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedRemoteAddress"
  ): TypedContractMethod<
    [remoteChainId: BigNumberish, remoteAddress: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [amount: BigNumberish, period: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeWithPermit"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      period: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startWithdraw"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [holder: AddressLike, recipient: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateLock"
  ): TypedContractMethod<[period: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "BridgeLock"
  ): TypedContractEvent<
    BridgeLockEvent.InputTuple,
    BridgeLockEvent.OutputTuple,
    BridgeLockEvent.OutputObject
  >;
  getEvent(
    key: "EarlyUnstakeRewardCollected"
  ): TypedContractEvent<
    EarlyUnstakeRewardCollectedEvent.InputTuple,
    EarlyUnstakeRewardCollectedEvent.OutputTuple,
    EarlyUnstakeRewardCollectedEvent.OutputObject
  >;
  getEvent(
    key: "Harvest"
  ): TypedContractEvent<
    HarvestEvent.InputTuple,
    HarvestEvent.OutputTuple,
    HarvestEvent.OutputObject
  >;
  getEvent(
    key: "MessageFailed"
  ): TypedContractEvent<
    MessageFailedEvent.InputTuple,
    MessageFailedEvent.OutputTuple,
    MessageFailedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReceiveFromChain"
  ): TypedContractEvent<
    ReceiveFromChainEvent.InputTuple,
    ReceiveFromChainEvent.OutputTuple,
    ReceiveFromChainEvent.OutputObject
  >;
  getEvent(
    key: "RetryMessageSuccess"
  ): TypedContractEvent<
    RetryMessageSuccessEvent.InputTuple,
    RetryMessageSuccessEvent.OutputTuple,
    RetryMessageSuccessEvent.OutputObject
  >;
  getEvent(
    key: "RewardsAdded"
  ): TypedContractEvent<
    RewardsAddedEvent.InputTuple,
    RewardsAddedEvent.OutputTuple,
    RewardsAddedEvent.OutputObject
  >;
  getEvent(
    key: "SendToChain"
  ): TypedContractEvent<
    SendToChainEvent.InputTuple,
    SendToChainEvent.OutputTuple,
    SendToChainEvent.OutputObject
  >;
  getEvent(
    key: "SetTrustedRemoteAddress"
  ): TypedContractEvent<
    SetTrustedRemoteAddressEvent.InputTuple,
    SetTrustedRemoteAddressEvent.OutputTuple,
    SetTrustedRemoteAddressEvent.OutputObject
  >;
  getEvent(
    key: "SetUseCustomAdapterParams"
  ): TypedContractEvent<
    SetUseCustomAdapterParamsEvent.InputTuple,
    SetUseCustomAdapterParamsEvent.OutputTuple,
    SetUseCustomAdapterParamsEvent.OutputObject
  >;
  getEvent(
    key: "Stake"
  ): TypedContractEvent<
    StakeEvent.InputTuple,
    StakeEvent.OutputTuple,
    StakeEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unstake"
  ): TypedContractEvent<
    UnstakeEvent.InputTuple,
    UnstakeEvent.OutputTuple,
    UnstakeEvent.OutputObject
  >;
  getEvent(
    key: "UpdateLock"
  ): TypedContractEvent<
    UpdateLockEvent.InputTuple,
    UpdateLockEvent.OutputTuple,
    UpdateLockEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "BridgeLock(address,uint64,uint64)": TypedContractEvent<
      BridgeLockEvent.InputTuple,
      BridgeLockEvent.OutputTuple,
      BridgeLockEvent.OutputObject
    >;
    BridgeLock: TypedContractEvent<
      BridgeLockEvent.InputTuple,
      BridgeLockEvent.OutputTuple,
      BridgeLockEvent.OutputObject
    >;

    "EarlyUnstakeRewardCollected(address,uint256)": TypedContractEvent<
      EarlyUnstakeRewardCollectedEvent.InputTuple,
      EarlyUnstakeRewardCollectedEvent.OutputTuple,
      EarlyUnstakeRewardCollectedEvent.OutputObject
    >;
    EarlyUnstakeRewardCollected: TypedContractEvent<
      EarlyUnstakeRewardCollectedEvent.InputTuple,
      EarlyUnstakeRewardCollectedEvent.OutputTuple,
      EarlyUnstakeRewardCollectedEvent.OutputObject
    >;

    "Harvest(address,uint256)": TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;
    Harvest: TypedContractEvent<
      HarvestEvent.InputTuple,
      HarvestEvent.OutputTuple,
      HarvestEvent.OutputObject
    >;

    "MessageFailed(uint16,bytes,uint64,bytes,bytes)": TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;
    MessageFailed: TypedContractEvent<
      MessageFailedEvent.InputTuple,
      MessageFailedEvent.OutputTuple,
      MessageFailedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReceiveFromChain(uint16,bytes,address,uint256)": TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;
    ReceiveFromChain: TypedContractEvent<
      ReceiveFromChainEvent.InputTuple,
      ReceiveFromChainEvent.OutputTuple,
      ReceiveFromChainEvent.OutputObject
    >;

    "RetryMessageSuccess(uint16,bytes,uint64,bytes32)": TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;
    RetryMessageSuccess: TypedContractEvent<
      RetryMessageSuccessEvent.InputTuple,
      RetryMessageSuccessEvent.OutputTuple,
      RetryMessageSuccessEvent.OutputObject
    >;

    "RewardsAdded(uint256)": TypedContractEvent<
      RewardsAddedEvent.InputTuple,
      RewardsAddedEvent.OutputTuple,
      RewardsAddedEvent.OutputObject
    >;
    RewardsAdded: TypedContractEvent<
      RewardsAddedEvent.InputTuple,
      RewardsAddedEvent.OutputTuple,
      RewardsAddedEvent.OutputObject
    >;

    "SendToChain(address,uint16,bytes,uint256)": TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;
    SendToChain: TypedContractEvent<
      SendToChainEvent.InputTuple,
      SendToChainEvent.OutputTuple,
      SendToChainEvent.OutputObject
    >;

    "SetTrustedRemoteAddress(uint16,bytes)": TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;
    SetTrustedRemoteAddress: TypedContractEvent<
      SetTrustedRemoteAddressEvent.InputTuple,
      SetTrustedRemoteAddressEvent.OutputTuple,
      SetTrustedRemoteAddressEvent.OutputObject
    >;

    "SetUseCustomAdapterParams(bool)": TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;
    SetUseCustomAdapterParams: TypedContractEvent<
      SetUseCustomAdapterParamsEvent.InputTuple,
      SetUseCustomAdapterParamsEvent.OutputTuple,
      SetUseCustomAdapterParamsEvent.OutputObject
    >;

    "Stake(address,uint256,uint64,uint64)": TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;
    Stake: TypedContractEvent<
      StakeEvent.InputTuple,
      StakeEvent.OutputTuple,
      StakeEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unstake(address,uint256,uint256,uint256)": TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;
    Unstake: TypedContractEvent<
      UnstakeEvent.InputTuple,
      UnstakeEvent.OutputTuple,
      UnstakeEvent.OutputObject
    >;

    "UpdateLock(address,uint64,uint64)": TypedContractEvent<
      UpdateLockEvent.InputTuple,
      UpdateLockEvent.OutputTuple,
      UpdateLockEvent.OutputObject
    >;
    UpdateLock: TypedContractEvent<
      UpdateLockEvent.InputTuple,
      UpdateLockEvent.OutputTuple,
      UpdateLockEvent.OutputObject
    >;

    "Withdraw(address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
