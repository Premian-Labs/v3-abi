/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface OptionMathMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "blackScholesPrice"
      | "calculateStrikeInterval"
      | "calculateTimeToMaturity"
      | "d1d2"
      | "helperNormal"
      | "initializationFee"
      | "isFriday"
      | "isLastFriday"
      | "logMoneyness"
      | "normalCdf"
      | "normalPdf"
      | "optionDelta"
      | "relu"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "blackScholesPrice",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateStrikeInterval",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTimeToMaturity",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "d1d2",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "helperNormal",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initializationFee",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFriday",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isLastFriday",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logMoneyness",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "normalCdf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "normalPdf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "optionDelta",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(functionFragment: "relu", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "blackScholesPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateStrikeInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTimeToMaturity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "d1d2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "helperNormal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFriday", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isLastFriday",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "logMoneyness",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "normalCdf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "normalPdf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "optionDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "relu", data: BytesLike): Result;
}

export interface OptionMathMock extends BaseContract {
  connect(runner?: ContractRunner | null): OptionMathMock;
  waitForDeployment(): Promise<this>;

  interface: OptionMathMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  blackScholesPrice: TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish,
      volAnnualized: BigNumberish,
      riskFreeRate: BigNumberish,
      isCall: boolean
    ],
    [bigint],
    "view"
  >;

  calculateStrikeInterval: TypedContractMethod<
    [strike: BigNumberish],
    [bigint],
    "view"
  >;

  calculateTimeToMaturity: TypedContractMethod<
    [maturity: BigNumberish],
    [bigint],
    "view"
  >;

  d1d2: TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish,
      volAnnualized: BigNumberish,
      riskFreeRate: BigNumberish
    ],
    [[bigint, bigint] & { d1: bigint; d2: bigint }],
    "view"
  >;

  helperNormal: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  initializationFee: TypedContractMethod<
    [spot: BigNumberish, strike: BigNumberish, maturity: BigNumberish],
    [bigint],
    "view"
  >;

  isFriday: TypedContractMethod<[maturity: BigNumberish], [boolean], "view">;

  isLastFriday: TypedContractMethod<
    [maturity: BigNumberish],
    [boolean],
    "view"
  >;

  logMoneyness: TypedContractMethod<
    [spot: BigNumberish, strike: BigNumberish],
    [bigint],
    "view"
  >;

  normalCdf: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  normalPdf: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  optionDelta: TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish,
      volAnnualized: BigNumberish,
      riskFreeRate: BigNumberish,
      isCall: boolean
    ],
    [bigint],
    "view"
  >;

  relu: TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "blackScholesPrice"
  ): TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish,
      volAnnualized: BigNumberish,
      riskFreeRate: BigNumberish,
      isCall: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateStrikeInterval"
  ): TypedContractMethod<[strike: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateTimeToMaturity"
  ): TypedContractMethod<[maturity: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "d1d2"
  ): TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish,
      volAnnualized: BigNumberish,
      riskFreeRate: BigNumberish
    ],
    [[bigint, bigint] & { d1: bigint; d2: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "helperNormal"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "initializationFee"
  ): TypedContractMethod<
    [spot: BigNumberish, strike: BigNumberish, maturity: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFriday"
  ): TypedContractMethod<[maturity: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "isLastFriday"
  ): TypedContractMethod<[maturity: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "logMoneyness"
  ): TypedContractMethod<
    [spot: BigNumberish, strike: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "normalCdf"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "normalPdf"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "optionDelta"
  ): TypedContractMethod<
    [
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish,
      volAnnualized: BigNumberish,
      riskFreeRate: BigNumberish,
      isCall: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "relu"
  ): TypedContractMethod<[x: BigNumberish], [bigint], "view">;

  filters: {};
}
