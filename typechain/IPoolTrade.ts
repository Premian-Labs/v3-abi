/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPoolInternal {
  export type QuoteOBStruct = {
    provider: AddressLike;
    taker: AddressLike;
    price: BigNumberish;
    size: BigNumberish;
    isBuy: boolean;
    deadline: BigNumberish;
    salt: BigNumberish;
  };

  export type QuoteOBStructOutput = [
    provider: string,
    taker: string,
    price: bigint,
    size: bigint,
    isBuy: boolean,
    deadline: bigint,
    salt: bigint
  ] & {
    provider: string;
    taker: string;
    price: bigint;
    size: bigint;
    isBuy: boolean;
    deadline: bigint;
    salt: bigint;
  };

  export type SignatureStruct = { v: BigNumberish; r: BytesLike; s: BytesLike };

  export type SignatureStructOutput = [v: bigint, r: string, s: string] & {
    v: bigint;
    r: string;
    s: string;
  };
}

export declare namespace Position {
  export type DeltaStruct = {
    collateral: BigNumberish;
    longs: BigNumberish;
    shorts: BigNumberish;
  };

  export type DeltaStructOutput = [
    collateral: bigint,
    longs: bigint,
    shorts: bigint
  ] & { collateral: bigint; longs: bigint; shorts: bigint };
}

export interface IPoolTradeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "cancelQuotesOB"
      | "fillQuoteOB"
      | "flashFee"
      | "flashLoan"
      | "getQuoteAMM"
      | "getQuoteOBFilledAmount"
      | "isQuoteOBValid"
      | "maxFlashLoan"
      | "trade"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "cancelQuotesOB",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fillQuoteOB",
    values: [
      IPoolInternal.QuoteOBStruct,
      BigNumberish,
      IPoolInternal.SignatureStruct,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashFee",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteAMM",
    values: [AddressLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuoteOBFilledAmount",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isQuoteOBValid",
    values: [
      IPoolInternal.QuoteOBStruct,
      BigNumberish,
      IPoolInternal.SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "maxFlashLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [BigNumberish, boolean, BigNumberish, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelQuotesOB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fillQuoteOB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteAMM",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuoteOBFilledAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isQuoteOBValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxFlashLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
}

export interface IPoolTrade extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolTrade;
  waitForDeployment(): Promise<this>;

  interface: IPoolTradeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  cancelQuotesOB: TypedContractMethod<
    [hashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  fillQuoteOB: TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      signature: IPoolInternal.SignatureStruct,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        premiumTaker: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;

  flashFee: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;

  flashLoan: TypedContractMethod<
    [
      receiver: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;

  getQuoteAMM: TypedContractMethod<
    [taker: AddressLike, size: BigNumberish, isBuy: boolean],
    [[bigint, bigint] & { premiumNet: bigint; takerFee: bigint }],
    "view"
  >;

  getQuoteOBFilledAmount: TypedContractMethod<
    [provider: AddressLike, quoteOBHash: BytesLike],
    [bigint],
    "view"
  >;

  isQuoteOBValid: TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      sig: IPoolInternal.SignatureStruct
    ],
    [[boolean, bigint]],
    "view"
  >;

  maxFlashLoan: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  trade: TypedContractMethod<
    [
      size: BigNumberish,
      isBuy: boolean,
      premiumLimit: BigNumberish,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        totalPremium: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "cancelQuotesOB"
  ): TypedContractMethod<[hashes: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fillQuoteOB"
  ): TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      signature: IPoolInternal.SignatureStruct,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        premiumTaker: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "flashFee"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "flashLoan"
  ): TypedContractMethod<
    [
      receiver: AddressLike,
      token: AddressLike,
      amount: BigNumberish,
      data: BytesLike
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getQuoteAMM"
  ): TypedContractMethod<
    [taker: AddressLike, size: BigNumberish, isBuy: boolean],
    [[bigint, bigint] & { premiumNet: bigint; takerFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getQuoteOBFilledAmount"
  ): TypedContractMethod<
    [provider: AddressLike, quoteOBHash: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "isQuoteOBValid"
  ): TypedContractMethod<
    [
      quoteOB: IPoolInternal.QuoteOBStruct,
      size: BigNumberish,
      sig: IPoolInternal.SignatureStruct
    ],
    [[boolean, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxFlashLoan"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "trade"
  ): TypedContractMethod<
    [
      size: BigNumberish,
      isBuy: boolean,
      premiumLimit: BigNumberish,
      referrer: AddressLike
    ],
    [
      [bigint, Position.DeltaStructOutput] & {
        totalPremium: bigint;
        delta: Position.DeltaStructOutput;
      }
    ],
    "nonpayable"
  >;

  filters: {};
}
