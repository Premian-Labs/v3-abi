/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FeeConverterInterface extends Interface {
  getFunction(
    nameOrSignature: "convert" | "getExchangeHelper" | "setAuthorized"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Converted"
      | "OwnershipTransferred"
      | "SetAuthorized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "convert",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getExchangeHelper",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAuthorized",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExchangeHelper",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuthorized",
    data: BytesLike
  ): Result;
}

export namespace ConvertedEvent {
  export type InputTuple = [
    account: AddressLike,
    token: AddressLike,
    inAmount: BigNumberish,
    outAmount: BigNumberish,
    treasuryAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    token: string,
    inAmount: bigint,
    outAmount: bigint,
    treasuryAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    token: string;
    inAmount: bigint;
    outAmount: bigint;
    treasuryAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetAuthorizedEvent {
  export type InputTuple = [account: AddressLike, isAuthorized: boolean];
  export type OutputTuple = [account: string, isAuthorized: boolean];
  export interface OutputObject {
    account: string;
    isAuthorized: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FeeConverter extends BaseContract {
  connect(runner?: ContractRunner | null): FeeConverter;
  waitForDeployment(): Promise<this>;

  interface: FeeConverterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  convert: TypedContractMethod<
    [
      sourceToken: AddressLike,
      callee: AddressLike,
      allowanceTarget: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getExchangeHelper: TypedContractMethod<[], [string], "view">;

  setAuthorized: TypedContractMethod<
    [account: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "convert"
  ): TypedContractMethod<
    [
      sourceToken: AddressLike,
      callee: AddressLike,
      allowanceTarget: AddressLike,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getExchangeHelper"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setAuthorized"
  ): TypedContractMethod<
    [account: AddressLike, isAuthorized: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Converted"
  ): TypedContractEvent<
    ConvertedEvent.InputTuple,
    ConvertedEvent.OutputTuple,
    ConvertedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SetAuthorized"
  ): TypedContractEvent<
    SetAuthorizedEvent.InputTuple,
    SetAuthorizedEvent.OutputTuple,
    SetAuthorizedEvent.OutputObject
  >;

  filters: {
    "Converted(address,address,uint256,uint256,uint256)": TypedContractEvent<
      ConvertedEvent.InputTuple,
      ConvertedEvent.OutputTuple,
      ConvertedEvent.OutputObject
    >;
    Converted: TypedContractEvent<
      ConvertedEvent.InputTuple,
      ConvertedEvent.OutputTuple,
      ConvertedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SetAuthorized(address,bool)": TypedContractEvent<
      SetAuthorizedEvent.InputTuple,
      SetAuthorizedEvent.OutputTuple,
      SetAuthorizedEvent.OutputObject
    >;
    SetAuthorized: TypedContractEvent<
      SetAuthorizedEvent.InputTuple,
      SetAuthorizedEvent.OutputTuple,
      SetAuthorizedEvent.OutputObject
    >;
  };
}
