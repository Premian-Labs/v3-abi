/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPoolFactory {
  export type PoolKeyStruct = {
    base: AddressLike;
    quote: AddressLike;
    oracleAdapter: AddressLike;
    strike: BigNumberish;
    maturity: BigNumberish;
    isCallPool: boolean;
  };

  export type PoolKeyStructOutput = [
    base: string,
    quote: string,
    oracleAdapter: string,
    strike: bigint,
    maturity: bigint,
    isCallPool: boolean
  ] & {
    base: string;
    quote: string;
    oracleAdapter: string;
    strike: bigint;
    maturity: bigint;
    isCallPool: boolean;
  };
}

export interface PoolFactoryDeployerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DIAMOND"
      | "POOL_FACTORY"
      | "calculatePoolAddress"
      | "deployPool"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DIAMOND", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "POOL_FACTORY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePoolAddress",
    values: [IPoolFactory.PoolKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deployPool",
    values: [IPoolFactory.PoolKeyStruct]
  ): string;

  decodeFunctionResult(functionFragment: "DIAMOND", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "POOL_FACTORY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
}

export interface PoolFactoryDeployer extends BaseContract {
  connect(runner?: ContractRunner | null): PoolFactoryDeployer;
  waitForDeployment(): Promise<this>;

  interface: PoolFactoryDeployerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DIAMOND: TypedContractMethod<[], [string], "view">;

  POOL_FACTORY: TypedContractMethod<[], [string], "view">;

  calculatePoolAddress: TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [string],
    "view"
  >;

  deployPool: TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [string],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DIAMOND"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "POOL_FACTORY"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculatePoolAddress"
  ): TypedContractMethod<[k: IPoolFactory.PoolKeyStruct], [string], "view">;
  getFunction(
    nameOrSignature: "deployPool"
  ): TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [string],
    "nonpayable"
  >;

  filters: {};
}
