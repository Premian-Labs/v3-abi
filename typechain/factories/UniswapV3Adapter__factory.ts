/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  UniswapV3Adapter,
  UniswapV3AdapterInterface,
} from "../UniswapV3Adapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IUniswapV3Factory",
        name: "uniswapV3Factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "wrappedNativeToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_gasPerCardinality",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_gasPerPool",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "arrayLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "ArrayUtils__ArrayCannotExpand",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "arrayLength",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "size",
        type: "uint256",
      },
    ],
    name: "OracleAdapter__ArrayCannotExpand",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "price",
        type: "int256",
      },
    ],
    name: "OracleAdapter__InvalidPrice",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "target",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "blockTimestamp",
        type: "uint256",
      },
    ],
    name: "OracleAdapter__InvalidTarget",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "OracleAdapter__PairCannotBeSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "OracleAdapter__PairNotSupported",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "OracleAdapter__TokensAreSame",
    type: "error",
  },
  {
    inputs: [],
    name: "OracleAdapter__ZeroAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "Ownable__NotTransitiveOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "UD60x18",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMath_UD60x18_IntoSD59x18_Overflow",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeCast__NegativeValue",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeCast__ValueDoesNotFit",
    type: "error",
  },
  {
    inputs: [],
    name: "T",
    type: "error",
  },
  {
    inputs: [],
    name: "UniswapV3Adapter__CardinalityPerMinuteNotSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "feeTier",
        type: "uint24",
      },
    ],
    name: "UniswapV3Adapter__FeeTierExists",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "oldestObservation",
        type: "uint32",
      },
      {
        internalType: "uint32",
        name: "period",
        type: "uint32",
      },
    ],
    name: "UniswapV3Adapter__InsufficientObservationPeriod",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "feeTier",
        type: "uint24",
      },
    ],
    name: "UniswapV3Adapter__InvalidFeeTier",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "end",
        type: "uint256",
      },
    ],
    name: "UniswapV3Adapter__InvalidTimeRange",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "currentCardinality",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "targetCardinality",
        type: "uint16",
      },
    ],
    name: "UniswapV3Adapter__ObservationCardinalityTooLow",
    type: "error",
  },
  {
    inputs: [],
    name: "UniswapV3Adapter__PeriodNotSet",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token0",
        type: "address",
      },
      {
        internalType: "address",
        name: "token1",
        type: "address",
      },
    ],
    name: "UniswapV3Adapter__TokensUnsorted",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "cardinalityPerMinute",
        type: "uint256",
      },
    ],
    name: "UpdatedCardinalityPerMinute",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "period",
        type: "uint256",
      },
    ],
    name: "UpdatedPeriod",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "pools",
        type: "address[]",
      },
    ],
    name: "UpdatedPoolsForPair",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "describePricingPath",
    outputs: [
      {
        internalType: "enum IOracleAdapter.AdapterType",
        name: "adapterType",
        type: "uint8",
      },
      {
        internalType: "address[][]",
        name: "path",
        type: "address[][]",
      },
      {
        internalType: "uint8[]",
        name: "decimals",
        type: "uint8[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCardinalityPerMinute",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFactory",
    outputs: [
      {
        internalType: "contract IUniswapV3Factory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGasPerCardinality",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getGasToSupportPool",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPeriod",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "UD60x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "target",
        type: "uint256",
      },
    ],
    name: "getPriceAt",
    outputs: [
      {
        internalType: "UD60x18",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSupportedFeeTiers",
    outputs: [
      {
        internalType: "uint24[]",
        name: "",
        type: "uint24[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getTargetCardinality",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint24",
        name: "feeTier",
        type: "uint24",
      },
    ],
    name: "insertFeeTier",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "isPairSupported",
    outputs: [
      {
        internalType: "bool",
        name: "isCached",
        type: "bool",
      },
      {
        internalType: "bool",
        name: "hasPath",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "poolsForPair",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "newCardinalityPerMinute",
        type: "uint256",
      },
    ],
    name: "setCardinalityPerMinute",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "newPeriod",
        type: "uint32",
      },
    ],
    name: "setPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "upsertPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class UniswapV3Adapter__factory {
  static readonly abi = _abi;
  static createInterface(): UniswapV3AdapterInterface {
    return new Interface(_abi) as UniswapV3AdapterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): UniswapV3Adapter {
    return new Contract(address, _abi, runner) as unknown as UniswapV3Adapter;
  }
}
