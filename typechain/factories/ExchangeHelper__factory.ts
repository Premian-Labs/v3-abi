/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ExchangeHelper,
  ExchangeHelperInterface,
} from "../ExchangeHelper";

const _abi = [
  {
    inputs: [],
    name: "AddressUtils__NotContract",
    type: "error",
  },
  {
    inputs: [],
    name: "SafeERC20__OperationFailed",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sourceToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "targetToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "sourceTokenAmount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "callee",
        type: "address",
      },
      {
        internalType: "address",
        name: "allowanceTarget",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "refundAddress",
        type: "address",
      },
    ],
    name: "swapWithToken",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sourceLeft",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ExchangeHelper__factory {
  static readonly abi = _abi;
  static createInterface(): ExchangeHelperInterface {
    return new Interface(_abi) as ExchangeHelperInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ExchangeHelper {
    return new Contract(address, _abi, runner) as unknown as ExchangeHelper;
  }
}
