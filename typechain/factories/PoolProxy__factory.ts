/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { PoolProxy, PoolProxyInterface } from "../PoolProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "diamond",
        type: "address",
      },
      {
        internalType: "address",
        name: "base",
        type: "address",
      },
      {
        internalType: "address",
        name: "quote",
        type: "address",
      },
      {
        internalType: "address",
        name: "oracleAdapter",
        type: "address",
      },
      {
        internalType: "UD60x18",
        name: "strike",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maturity",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "isCallPool",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "DoublyLinkedList__InvalidInput",
    type: "error",
  },
  {
    inputs: [],
    name: "DoublyLinkedList__NonExistentEntry",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC165Base__InvalidInterfaceId",
    type: "error",
  },
  {
    inputs: [],
    name: "Proxy__ImplementationIsNotContract",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
] as const;

export class PoolProxy__factory {
  static readonly abi = _abi;
  static createInterface(): PoolProxyInterface {
    return new Interface(_abi) as PoolProxyInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): PoolProxy {
    return new Contract(address, _abi, runner) as unknown as PoolProxy;
  }
}
