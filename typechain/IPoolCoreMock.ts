/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Pricing {
  export type ArgsStruct = {
    liquidityRate: BigNumberish;
    marketPrice: BigNumberish;
    lower: BigNumberish;
    upper: BigNumberish;
    isBuy: boolean;
  };

  export type ArgsStructOutput = [
    liquidityRate: bigint,
    marketPrice: bigint,
    lower: bigint,
    upper: bigint,
    isBuy: boolean
  ] & {
    liquidityRate: bigint;
    marketPrice: bigint;
    lower: bigint;
    upper: bigint;
    isBuy: boolean;
  };
}

export declare namespace Position {
  export type KeyInternalStruct = {
    owner: AddressLike;
    operator: AddressLike;
    lower: BigNumberish;
    upper: BigNumberish;
    orderType: BigNumberish;
    isCall: boolean;
    strike: BigNumberish;
  };

  export type KeyInternalStructOutput = [
    owner: string,
    operator: string,
    lower: bigint,
    upper: bigint,
    orderType: bigint,
    isCall: boolean,
    strike: bigint
  ] & {
    owner: string;
    operator: string;
    lower: bigint;
    upper: bigint;
    orderType: bigint;
    isCall: boolean;
    strike: bigint;
  };
}

export declare namespace IPoolInternal {
  export type TickStruct = {
    delta: BigNumberish;
    externalFeeRate: BigNumberish;
    longDelta: BigNumberish;
    shortDelta: BigNumberish;
    counter: BigNumberish;
  };

  export type TickStructOutput = [
    delta: bigint,
    externalFeeRate: bigint,
    longDelta: bigint,
    shortDelta: bigint,
    counter: bigint
  ] & {
    delta: bigint;
    externalFeeRate: bigint;
    longDelta: bigint;
    shortDelta: bigint;
    counter: bigint;
  };

  export type QuoteOBStruct = {
    provider: AddressLike;
    taker: AddressLike;
    price: BigNumberish;
    size: BigNumberish;
    isBuy: boolean;
    deadline: BigNumberish;
    salt: BigNumberish;
  };

  export type QuoteOBStructOutput = [
    provider: string,
    taker: string,
    price: bigint,
    size: bigint,
    isBuy: boolean,
    deadline: bigint,
    salt: bigint
  ] & {
    provider: string;
    taker: string;
    price: bigint;
    size: bigint;
    isBuy: boolean;
    deadline: bigint;
    salt: bigint;
  };
}

export interface IPoolCoreMockInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_getPricing"
      | "exerciseFee"
      | "exposed_cross"
      | "exposed_getStrandedArea"
      | "exposed_getStrandedMarketPriceUpdate"
      | "exposed_getTick"
      | "exposed_isMarketPriceStranded"
      | "exposed_isRateNonTerminating"
      | "exposed_mint"
      | "formatTokenId"
      | "getCurrentTick"
      | "getLiquidityRate"
      | "getLongRate"
      | "getShortRate"
      | "mint"
      | "parseTokenId"
      | "protocolFees"
      | "quoteOBHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_getPricing",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exerciseFee",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_cross",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_getStrandedArea",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_getStrandedMarketPriceUpdate",
    values: [Position.KeyInternalStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_getTick",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_isMarketPriceStranded",
    values: [Position.KeyInternalStruct, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_isRateNonTerminating",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exposed_mint",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "formatTokenId",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentTick",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidityRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLongRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShortRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "parseTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quoteOBHash",
    values: [IPoolInternal.QuoteOBStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "_getPricing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exerciseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_cross",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_getStrandedArea",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_getStrandedMarketPriceUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_getTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_isMarketPriceStranded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_isRateNonTerminating",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exposed_mint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentTick",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidityRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLongRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShortRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quoteOBHash",
    data: BytesLike
  ): Result;
}

export interface IPoolCoreMock extends BaseContract {
  connect(runner?: ContractRunner | null): IPoolCoreMock;
  waitForDeployment(): Promise<this>;

  interface: IPoolCoreMockInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _getPricing: TypedContractMethod<
    [isBuy: boolean],
    [Pricing.ArgsStructOutput],
    "view"
  >;

  exerciseFee: TypedContractMethod<
    [
      taker: AddressLike,
      size: BigNumberish,
      intrinsicValue: BigNumberish,
      strike: BigNumberish,
      isCallPool: boolean
    ],
    [bigint],
    "view"
  >;

  exposed_cross: TypedContractMethod<[isBuy: boolean], [void], "nonpayable">;

  exposed_getStrandedArea: TypedContractMethod<
    [],
    [[bigint, bigint] & { lower: bigint; upper: bigint }],
    "view"
  >;

  exposed_getStrandedMarketPriceUpdate: TypedContractMethod<
    [p: Position.KeyInternalStruct, isBid: boolean],
    [bigint],
    "view"
  >;

  exposed_getTick: TypedContractMethod<
    [price: BigNumberish],
    [IPoolInternal.TickStructOutput],
    "view"
  >;

  exposed_isMarketPriceStranded: TypedContractMethod<
    [p: Position.KeyInternalStruct, isBid: boolean],
    [boolean],
    "view"
  >;

  exposed_isRateNonTerminating: TypedContractMethod<
    [lower: BigNumberish, upper: BigNumberish],
    [boolean],
    "view"
  >;

  exposed_mint: TypedContractMethod<
    [account: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  formatTokenId: TypedContractMethod<
    [
      operator: AddressLike,
      lower: BigNumberish,
      upper: BigNumberish,
      orderType: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getCurrentTick: TypedContractMethod<[], [bigint], "view">;

  getLiquidityRate: TypedContractMethod<[], [bigint], "view">;

  getLongRate: TypedContractMethod<[], [bigint], "view">;

  getShortRate: TypedContractMethod<[], [bigint], "view">;

  mint: TypedContractMethod<
    [account: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  parseTokenId: TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        version: bigint;
        operator: string;
        lower: bigint;
        upper: bigint;
        orderType: bigint;
      }
    ],
    "view"
  >;

  protocolFees: TypedContractMethod<[], [bigint], "view">;

  quoteOBHash: TypedContractMethod<
    [quoteOB: IPoolInternal.QuoteOBStruct],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_getPricing"
  ): TypedContractMethod<[isBuy: boolean], [Pricing.ArgsStructOutput], "view">;
  getFunction(
    nameOrSignature: "exerciseFee"
  ): TypedContractMethod<
    [
      taker: AddressLike,
      size: BigNumberish,
      intrinsicValue: BigNumberish,
      strike: BigNumberish,
      isCallPool: boolean
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_cross"
  ): TypedContractMethod<[isBuy: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exposed_getStrandedArea"
  ): TypedContractMethod<
    [],
    [[bigint, bigint] & { lower: bigint; upper: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_getStrandedMarketPriceUpdate"
  ): TypedContractMethod<
    [p: Position.KeyInternalStruct, isBid: boolean],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_getTick"
  ): TypedContractMethod<
    [price: BigNumberish],
    [IPoolInternal.TickStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_isMarketPriceStranded"
  ): TypedContractMethod<
    [p: Position.KeyInternalStruct, isBid: boolean],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_isRateNonTerminating"
  ): TypedContractMethod<
    [lower: BigNumberish, upper: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "exposed_mint"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "formatTokenId"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      lower: BigNumberish,
      upper: BigNumberish,
      orderType: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentTick"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLiquidityRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getLongRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getShortRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [account: AddressLike, id: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "parseTokenId"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [
      [bigint, string, bigint, bigint, bigint] & {
        version: bigint;
        operator: string;
        lower: bigint;
        upper: bigint;
        orderType: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolFees"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quoteOBHash"
  ): TypedContractMethod<
    [quoteOB: IPoolInternal.QuoteOBStruct],
    [string],
    "view"
  >;

  filters: {};
}
