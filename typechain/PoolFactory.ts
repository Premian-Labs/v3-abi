/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace IPoolFactory {
  export type PoolKeyStruct = {
    base: AddressLike;
    quote: AddressLike;
    oracleAdapter: AddressLike;
    strike: BigNumberish;
    maturity: BigNumberish;
    isCallPool: boolean;
  };

  export type PoolKeyStructOutput = [
    base: string,
    quote: string,
    oracleAdapter: string,
    strike: bigint,
    maturity: bigint,
    isCallPool: boolean
  ] & {
    base: string;
    quote: string;
    oracleAdapter: string;
    strike: bigint;
    maturity: bigint;
    isCallPool: boolean;
  };
}

export interface PoolFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deployPool"
      | "getPoolAddress"
      | "initializationFee"
      | "isPool"
      | "removeDiscount"
      | "setDiscountPerPool"
      | "setFeeReceiver"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "PoolDeployed"
      | "PricingPath"
      | "SetDiscountPerPool"
      | "SetFeeReceiver"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deployPool",
    values: [IPoolFactory.PoolKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAddress",
    values: [IPoolFactory.PoolKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "initializationFee",
    values: [IPoolFactory.PoolKeyStruct]
  ): string;
  encodeFunctionData(functionFragment: "isPool", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "removeDiscount",
    values: [IPoolFactory.PoolKeyStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setDiscountPerPool",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeReceiver",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "deployPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initializationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeDiscount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDiscountPerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeReceiver",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolDeployedEvent {
  export type InputTuple = [
    base: AddressLike,
    quote: AddressLike,
    oracleAdapter: AddressLike,
    strike: BigNumberish,
    maturity: BigNumberish,
    isCallPool: boolean,
    poolAddress: AddressLike
  ];
  export type OutputTuple = [
    base: string,
    quote: string,
    oracleAdapter: string,
    strike: bigint,
    maturity: bigint,
    isCallPool: boolean,
    poolAddress: string
  ];
  export interface OutputObject {
    base: string;
    quote: string;
    oracleAdapter: string;
    strike: bigint;
    maturity: bigint;
    isCallPool: boolean;
    poolAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PricingPathEvent {
  export type InputTuple = [
    pool: AddressLike,
    basePath: AddressLike[][],
    basePathDecimals: BigNumberish[],
    baseAdapterType: BigNumberish,
    quotePath: AddressLike[][],
    quotePathDecimals: BigNumberish[],
    quoteAdapterType: BigNumberish
  ];
  export type OutputTuple = [
    pool: string,
    basePath: string[][],
    basePathDecimals: bigint[],
    baseAdapterType: bigint,
    quotePath: string[][],
    quotePathDecimals: bigint[],
    quoteAdapterType: bigint
  ];
  export interface OutputObject {
    pool: string;
    basePath: string[][];
    basePathDecimals: bigint[];
    baseAdapterType: bigint;
    quotePath: string[][];
    quotePathDecimals: bigint[];
    quoteAdapterType: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetDiscountPerPoolEvent {
  export type InputTuple = [discountPerPool: BigNumberish];
  export type OutputTuple = [discountPerPool: bigint];
  export interface OutputObject {
    discountPerPool: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeReceiverEvent {
  export type InputTuple = [feeReceiver: AddressLike];
  export type OutputTuple = [feeReceiver: string];
  export interface OutputObject {
    feeReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoolFactory extends BaseContract {
  connect(runner?: ContractRunner | null): PoolFactory;
  waitForDeployment(): Promise<this>;

  interface: PoolFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deployPool: TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [string],
    "payable"
  >;

  getPoolAddress: TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [[string, boolean] & { pool: string; isDeployed: boolean }],
    "view"
  >;

  initializationFee: TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [bigint],
    "view"
  >;

  isPool: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  removeDiscount: TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [void],
    "nonpayable"
  >;

  setDiscountPerPool: TypedContractMethod<
    [discountPerPool: BigNumberish],
    [void],
    "nonpayable"
  >;

  setFeeReceiver: TypedContractMethod<
    [feeReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deployPool"
  ): TypedContractMethod<[k: IPoolFactory.PoolKeyStruct], [string], "payable">;
  getFunction(
    nameOrSignature: "getPoolAddress"
  ): TypedContractMethod<
    [k: IPoolFactory.PoolKeyStruct],
    [[string, boolean] & { pool: string; isDeployed: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "initializationFee"
  ): TypedContractMethod<[k: IPoolFactory.PoolKeyStruct], [bigint], "view">;
  getFunction(
    nameOrSignature: "isPool"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeDiscount"
  ): TypedContractMethod<[k: IPoolFactory.PoolKeyStruct], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setDiscountPerPool"
  ): TypedContractMethod<[discountPerPool: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeReceiver"
  ): TypedContractMethod<[feeReceiver: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolDeployed"
  ): TypedContractEvent<
    PoolDeployedEvent.InputTuple,
    PoolDeployedEvent.OutputTuple,
    PoolDeployedEvent.OutputObject
  >;
  getEvent(
    key: "PricingPath"
  ): TypedContractEvent<
    PricingPathEvent.InputTuple,
    PricingPathEvent.OutputTuple,
    PricingPathEvent.OutputObject
  >;
  getEvent(
    key: "SetDiscountPerPool"
  ): TypedContractEvent<
    SetDiscountPerPoolEvent.InputTuple,
    SetDiscountPerPoolEvent.OutputTuple,
    SetDiscountPerPoolEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeReceiver"
  ): TypedContractEvent<
    SetFeeReceiverEvent.InputTuple,
    SetFeeReceiverEvent.OutputTuple,
    SetFeeReceiverEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolDeployed(address,address,address,uint256,uint256,bool,address)": TypedContractEvent<
      PoolDeployedEvent.InputTuple,
      PoolDeployedEvent.OutputTuple,
      PoolDeployedEvent.OutputObject
    >;
    PoolDeployed: TypedContractEvent<
      PoolDeployedEvent.InputTuple,
      PoolDeployedEvent.OutputTuple,
      PoolDeployedEvent.OutputObject
    >;

    "PricingPath(address,address[][],uint8[],uint8,address[][],uint8[],uint8)": TypedContractEvent<
      PricingPathEvent.InputTuple,
      PricingPathEvent.OutputTuple,
      PricingPathEvent.OutputObject
    >;
    PricingPath: TypedContractEvent<
      PricingPathEvent.InputTuple,
      PricingPathEvent.OutputTuple,
      PricingPathEvent.OutputObject
    >;

    "SetDiscountPerPool(uint256)": TypedContractEvent<
      SetDiscountPerPoolEvent.InputTuple,
      SetDiscountPerPoolEvent.OutputTuple,
      SetDiscountPerPoolEvent.OutputObject
    >;
    SetDiscountPerPool: TypedContractEvent<
      SetDiscountPerPoolEvent.InputTuple,
      SetDiscountPerPoolEvent.OutputTuple,
      SetDiscountPerPoolEvent.OutputObject
    >;

    "SetFeeReceiver(address)": TypedContractEvent<
      SetFeeReceiverEvent.InputTuple,
      SetFeeReceiverEvent.OutputTuple,
      SetFeeReceiverEvent.OutputObject
    >;
    SetFeeReceiver: TypedContractEvent<
      SetFeeReceiverEvent.InputTuple,
      SetFeeReceiverEvent.OutputTuple,
      SetFeeReceiverEvent.OutputObject
    >;
  };
}
