/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace VolatilityOracleStorage {
  export type UpdateStruct = {
    updatedAt: BigNumberish;
    tau: BytesLike;
    theta: BytesLike;
    psi: BytesLike;
    rho: BytesLike;
  };

  export type UpdateStructOutput = [
    updatedAt: bigint,
    tau: string,
    theta: string,
    psi: string,
    rho: string
  ] & {
    updatedAt: bigint;
    tau: string;
    theta: string;
    psi: string;
    rho: string;
  };

  export type ParamsStruct = {
    tau: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish];
    theta: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ];
    psi: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish];
    rho: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish];
  };

  export type ParamsStructOutput = [
    tau: [bigint, bigint, bigint, bigint, bigint],
    theta: [bigint, bigint, bigint, bigint, bigint],
    psi: [bigint, bigint, bigint, bigint, bigint],
    rho: [bigint, bigint, bigint, bigint, bigint]
  ] & {
    tau: [bigint, bigint, bigint, bigint, bigint];
    theta: [bigint, bigint, bigint, bigint, bigint];
    psi: [bigint, bigint, bigint, bigint, bigint];
    rho: [bigint, bigint, bigint, bigint, bigint];
  };
}

export interface VolatilityOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addWhitelistedRelayers"
      | "formatParams"
      | "getParams"
      | "getParamsUnpacked"
      | "getRiskFreeRate"
      | "getVolatility(address,uint256,uint256,uint256)"
      | "getVolatility(address,uint256,uint256[],uint256[])"
      | "getWhitelistedRelayers"
      | "parseParams"
      | "removeWhitelistedRelayers"
      | "updateParams"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "UpdateParameters"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addWhitelistedRelayers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "formatParams",
    values: [
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getParams",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getParamsUnpacked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskFreeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVolatility(address,uint256,uint256,uint256)",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVolatility(address,uint256,uint256[],uint256[])",
    values: [AddressLike, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedRelayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parseParams",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedRelayers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParams",
    values: [
      AddressLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BytesLike[],
      BigNumberish
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "formatParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getParams", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getParamsUnpacked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskFreeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolatility(address,uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVolatility(address,uint256,uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parseParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedRelayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParams",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpdateParametersEvent {
  export type InputTuple = [
    token: AddressLike,
    tau: BytesLike,
    theta: BytesLike,
    psi: BytesLike,
    rho: BytesLike
  ];
  export type OutputTuple = [
    token: string,
    tau: string,
    theta: string,
    psi: string,
    rho: string
  ];
  export interface OutputObject {
    token: string;
    tau: string;
    theta: string;
    psi: string;
    rho: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VolatilityOracle extends BaseContract {
  connect(runner?: ContractRunner | null): VolatilityOracle;
  waitForDeployment(): Promise<this>;

  interface: VolatilityOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addWhitelistedRelayers: TypedContractMethod<
    [accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  formatParams: TypedContractMethod<
    [
      params: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [string],
    "view"
  >;

  getParams: TypedContractMethod<
    [token: AddressLike],
    [VolatilityOracleStorage.UpdateStructOutput],
    "view"
  >;

  getParamsUnpacked: TypedContractMethod<
    [token: AddressLike],
    [VolatilityOracleStorage.ParamsStructOutput],
    "view"
  >;

  getRiskFreeRate: TypedContractMethod<[], [bigint], "view">;

  "getVolatility(address,uint256,uint256,uint256)": TypedContractMethod<
    [
      token: AddressLike,
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish
    ],
    [bigint],
    "view"
  >;

  "getVolatility(address,uint256,uint256[],uint256[])": TypedContractMethod<
    [
      token: AddressLike,
      spot: BigNumberish,
      strike: BigNumberish[],
      timeToMaturity: BigNumberish[]
    ],
    [bigint[]],
    "view"
  >;

  getWhitelistedRelayers: TypedContractMethod<[], [string[]], "view">;

  parseParams: TypedContractMethod<
    [input: BytesLike],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;

  removeWhitelistedRelayers: TypedContractMethod<
    [accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  updateParams: TypedContractMethod<
    [
      tokens: AddressLike[],
      tau: BytesLike[],
      theta: BytesLike[],
      psi: BytesLike[],
      rho: BytesLike[],
      riskFreeRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addWhitelistedRelayers"
  ): TypedContractMethod<[accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "formatParams"
  ): TypedContractMethod<
    [
      params: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ]
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParams"
  ): TypedContractMethod<
    [token: AddressLike],
    [VolatilityOracleStorage.UpdateStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getParamsUnpacked"
  ): TypedContractMethod<
    [token: AddressLike],
    [VolatilityOracleStorage.ParamsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRiskFreeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVolatility(address,uint256,uint256,uint256)"
  ): TypedContractMethod<
    [
      token: AddressLike,
      spot: BigNumberish,
      strike: BigNumberish,
      timeToMaturity: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVolatility(address,uint256,uint256[],uint256[])"
  ): TypedContractMethod<
    [
      token: AddressLike,
      spot: BigNumberish,
      strike: BigNumberish[],
      timeToMaturity: BigNumberish[]
    ],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWhitelistedRelayers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "parseParams"
  ): TypedContractMethod<
    [input: BytesLike],
    [[bigint, bigint, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeWhitelistedRelayers"
  ): TypedContractMethod<[accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateParams"
  ): TypedContractMethod<
    [
      tokens: AddressLike[],
      tau: BytesLike[],
      theta: BytesLike[],
      psi: BytesLike[],
      rho: BytesLike[],
      riskFreeRate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UpdateParameters"
  ): TypedContractEvent<
    UpdateParametersEvent.InputTuple,
    UpdateParametersEvent.OutputTuple,
    UpdateParametersEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UpdateParameters(address,bytes32,bytes32,bytes32,bytes32)": TypedContractEvent<
      UpdateParametersEvent.InputTuple,
      UpdateParametersEvent.OutputTuple,
      UpdateParametersEvent.OutputObject
    >;
    UpdateParameters: TypedContractEvent<
      UpdateParametersEvent.InputTuple,
      UpdateParametersEvent.OutputTuple,
      UpdateParametersEvent.OutputObject
    >;
  };
}
